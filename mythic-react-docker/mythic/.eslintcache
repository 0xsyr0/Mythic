[{"/mythic/src/index.js":"1","/mythic/src/cache.js":"2","/mythic/src/components/App.js":"3","/mythic/src/components/utilities/HTTPPost.js":"4","/mythic/src/components/utilities/Snackbar.js":"5","/mythic/src/components/utilities/LoggedInRoute.js":"6","/mythic/src/components/TopAppBar.js":"7","/mythic/src/components/utilities/useDarkMode.js":"8","/mythic/src/themes/GlobalStyles.js":"9","/mythic/src/themes/Themes.js":"10","/mythic/src/components/pages/Login/LoginForm.js":"11","/mythic/src/components/pages/Settings/Settings.js":"12","/mythic/src/components/pages/Logout/Logout.js":"13","/mythic/src/components/pages/PayloadTypes/PayloadTypes.js":"14","/mythic/src/components/pages/CreatePayload/CreatePayload.js":"15","/mythic/src/components/pages/EventFeed/EventFeed.js":"16","/mythic/src/components/pages/BrowserScripts/BrowserScripts.js":"17","/mythic/src/components/pages/Payloads/Payloads.js":"18","/mythic/src/components/pages/Home/Home.js":"19","/mythic/src/components/pages/SingleTaskView/SingleTaskView.js":"20","/mythic/src/components/pages/C2Profiles/C2Profiles.js":"21","/mythic/src/components/pages/Callbacks/Callbacks.js":"22","/mythic/src/components/EventFeedNotifications.js":"23","/mythic/src/components/TopAppBarNotifications.js":"24","/mythic/src/components/pages/Callbacks/HeightsDialog.js":"25","/mythic/src/components/pages/Callbacks/CallbacksTabs.js":"26","/mythic/src/components/pages/Callbacks/CallbacksGraph.js":"27","/mythic/src/components/MythicComponents/MythicDialog.js":"28","/mythic/src/components/pages/Callbacks/CallbacksTable.js":"29","/mythic/src/components/MythicComponents/MythicTextField.js":"30","/mythic/src/components/pages/Callbacks/CallbacksTabsTasking.js":"31","/mythic/src/components/pages/Callbacks/TaskParametersDialog.js":"32","/mythic/src/components/pages/Callbacks/ManuallyAddEdgeDialog.js":"33","/mythic/src/components/MythicComponents/MythicSelectFromListDialog.js":"34","/mythic/src/components/pages/Callbacks/CallbackMutations.js":"35","/mythic/src/components/MythicComponents/MythicTable.js":"36","/mythic/src/components/pages/Callbacks/CallbacksTableRow.js":"37","/mythic/src/components/utilities/BrowserScriptHelpers.js":"38","/mythic/src/components/pages/Callbacks/CallbacksTabsTaskingInput.js":"39","/mythic/src/components/pages/Callbacks/TaskDisplay.js":"40","/mythic/src/components/pages/Callbacks/TaskParametersDialogRow.js":"41","/mythic/src/components/pages/Callbacks/TaskViewParametersDialog.js":"42","/mythic/src/components/pages/Callbacks/TaskOpsecDialog.js":"43","/mythic/src/components/pages/Callbacks/TaskCommentDialog.js":"44","/mythic/src/components/pages/Callbacks/ResponseDisplay.js":"45","/mythic/src/components/utilities/Time.js":"46","/mythic/src/components/utilities/Clipboard.js":"47","/mythic/src/components/pages/Callbacks/ResponseDisplayBrowserScript.js":"48","/mythic/src/components/pages/Callbacks/C2PathDialog.js":"49","/mythic/src/components/MythicComponents/MythicDisplayTextDialog.js":"50","/mythic/src/components/pages/Callbacks/D3ContextMenu.js":"51","/mythic/src/components/MythicComponents/MythicTabPanel.js":"52","/mythic/src/components/pages/C2Profiles/C2ProfilesCard.js":"53","/mythic/src/components/pages/Home/QuickStartCard.js":"54","/mythic/src/components/pages/Payloads/PayloadsTable.js":"55","/mythic/src/components/pages/EventFeed/EventFeedTable.js":"56","/mythic/src/components/pages/CreatePayload/Step5Build.js":"57","/mythic/src/components/pages/CreatePayload/Step3SelectCommands.js":"58","/mythic/src/components/pages/CreatePayload/Step4C2Profiles.js":"59","/mythic/src/components/pages/CreatePayload/Step2SelectPayloadType.js":"60","/mythic/src/components/pages/BrowserScripts/BrowserScriptsTable.js":"61","/mythic/src/components/pages/BrowserScripts/BrowserScriptsOperationsTable.js":"62","/mythic/src/components/pages/CreatePayload/Step1SelectOS.js":"63","/mythic/src/components/pages/C2Profiles/C2ProfileStartStopOutputDialog.js":"64","/mythic/src/components/pages/C2Profiles/C2ProfileConfigDialog.js":"65","/mythic/src/components/pages/Payloads/PayloadsTableRow.js":"66","/mythic/src/components/pages/EventFeed/EventFeedTableInput.js":"67","/mythic/src/components/pages/CreatePayload/PayloadSubscriptionNotification.js":"68","/mythic/src/components/pages/CreatePayload/CreatePayloadNavigationButtons.js":"69","/mythic/src/components/pages/EventFeed/EventFeedTableEvents.js":"70","/mythic/src/components/pages/CreatePayload/CreatePayloadBuildParametersTable.js":"71","/mythic/src/components/pages/CreatePayload/CreatePayloadC2ProfileParametersTable.js":"72","/mythic/src/components/pages/BrowserScripts/BrowserScriptsTableRow.js":"73","/mythic/src/components/pages/BrowserScripts/BrowserScriptsOperationsTableRow.js":"74","/mythic/src/components/pages/Payloads/PayloadsTableRowC2Status.js":"75","/mythic/src/components/pages/Payloads/PayloadBuildMessageDialog.js":"76","/mythic/src/components/pages/Payloads/PayloadDescriptionDialog.js":"77","/mythic/src/components/MythicComponents/MythicConfirmDialog.js":"78","/mythic/src/components/pages/Payloads/PayloadFilenameDialog.js":"79","/mythic/src/components/pages/CreatePayload/CreatePayloadParameter.js":"80","/mythic/src/components/pages/Payloads/DetailedPayloadTable.js":"81","/mythic/src/components/pages/BrowserScripts/EditScriptDialog.js":"82","/mythic/src/components/pages/C2Profiles/C2ProfileOutputDialog.js":"83","/mythic/src/components/pages/C2Profiles/C2ProfileBuildDialog.js":"84","/mythic/src/components/pages/PayloadTypes/PayloadTypeCard.js":"85","/mythic/src/components/pages/Settings/SettingsOperatorTable.js":"86","/mythic/src/components/pages/PayloadTypes/PayloadTypeBuildDialog.js":"87","/mythic/src/components/pages/Settings/SettingsOperator.js":"88","/mythic/src/components/pages/Settings/SettingsOperatorDialog.js":"89","/mythic/src/components/pages/Settings/SettingsOperatorAPIToken.js":"90","/mythic/src/components/pages/Settings/SettingsOperatorDeleteDialog.js":"91"},{"size":6713,"mtime":1615582472668,"results":"92","hashOfConfig":"93"},{"size":797,"mtime":1610216136382,"results":"94","hashOfConfig":"93"},{"size":3848,"mtime":1615578769487,"results":"95","hashOfConfig":"93"},{"size":376,"mtime":1610215206991,"results":"96","hashOfConfig":"93"},{"size":619,"mtime":1615572090170,"results":"97","hashOfConfig":"93"},{"size":668,"mtime":1613238870047,"results":"98","hashOfConfig":"93"},{"size":7869,"mtime":1615591048703,"results":"99","hashOfConfig":"93"},{"size":662,"mtime":1608956615329,"results":"100","hashOfConfig":"93"},{"size":3596,"mtime":1615313719395,"results":"101","hashOfConfig":"93"},{"size":1636,"mtime":1615590989026,"results":"102","hashOfConfig":"93"},{"size":3437,"mtime":1615411065412,"results":"103","hashOfConfig":"93"},{"size":4702,"mtime":1614281283525,"results":"104","hashOfConfig":"93"},{"size":503,"mtime":1614550719567,"results":"105","hashOfConfig":"93"},{"size":977,"mtime":1614546722947,"results":"106","hashOfConfig":"93"},{"size":2480,"mtime":1609698487134,"results":"107","hashOfConfig":"93"},{"size":4635,"mtime":1615666802848,"results":"108","hashOfConfig":"93"},{"size":6056,"mtime":1615666817292,"results":"109","hashOfConfig":"93"},{"size":3492,"mtime":1615835667067,"results":"110","hashOfConfig":"93"},{"size":212,"mtime":1609399087046,"results":"111","hashOfConfig":"93"},{"size":2787,"mtime":1615508945175,"results":"112","hashOfConfig":"93"},{"size":1092,"mtime":1615414364590,"results":"113","hashOfConfig":"93"},{"size":7068,"mtime":1615416035498,"results":"114","hashOfConfig":"93"},{"size":1925,"mtime":1615572161315,"results":"115","hashOfConfig":"93"},{"size":1793,"mtime":1615571972436,"results":"116","hashOfConfig":"93"},{"size":1467,"mtime":1614980248860,"results":"117","hashOfConfig":"93"},{"size":2452,"mtime":1615416617693,"results":"118","hashOfConfig":"93"},{"size":15379,"mtime":1615343821351,"results":"119","hashOfConfig":"93"},{"size":728,"mtime":1615305761622,"results":"120","hashOfConfig":"93"},{"size":6090,"mtime":1615330602544,"results":"121","hashOfConfig":"93"},{"size":2471,"mtime":1612852468938,"results":"122","hashOfConfig":"93"},{"size":10020,"mtime":1615840146350,"results":"123","hashOfConfig":"93"},{"size":29171,"mtime":1615405073330,"results":"124","hashOfConfig":"93"},{"size":5795,"mtime":1615324588301,"results":"125","hashOfConfig":"93"},{"size":2509,"mtime":1615341147544,"results":"126","hashOfConfig":"93"},{"size":768,"mtime":1614979227713,"results":"127","hashOfConfig":"93"},{"size":3005,"mtime":1614562644473,"results":"128","hashOfConfig":"93"},{"size":11078,"mtime":1615569678837,"results":"129","hashOfConfig":"93"},{"size":4211,"mtime":1615510517244,"results":"130","hashOfConfig":"93"},{"size":4192,"mtime":1615410790966,"results":"131","hashOfConfig":"93"},{"size":14601,"mtime":1615569846985,"results":"132","hashOfConfig":"93"},{"size":21353,"mtime":1615410980903,"results":"133","hashOfConfig":"93"},{"size":1791,"mtime":1615417132401,"results":"134","hashOfConfig":"93"},{"size":3813,"mtime":1614616835488,"results":"135","hashOfConfig":"93"},{"size":2452,"mtime":1615275719014,"results":"136","hashOfConfig":"93"},{"size":2298,"mtime":1615520168262,"results":"137","hashOfConfig":"93"},{"size":1553,"mtime":1614563871337,"results":"138","hashOfConfig":"93"},{"size":776,"mtime":1610258604824,"results":"139","hashOfConfig":"93"},{"size":583,"mtime":1615583408256,"results":"140","hashOfConfig":"93"},{"size":10590,"mtime":1615268475067,"results":"141","hashOfConfig":"93"},{"size":1163,"mtime":1615398699213,"results":"142","hashOfConfig":"93"},{"size":1456,"mtime":1614966167958,"results":"143","hashOfConfig":"93"},{"size":1260,"mtime":1614915878479,"results":"144","hashOfConfig":"93"},{"size":10643,"mtime":1615570759177,"results":"145","hashOfConfig":"93"},{"size":2384,"mtime":1615578817913,"results":"146","hashOfConfig":"93"},{"size":2310,"mtime":1615312243442,"results":"147","hashOfConfig":"93"},{"size":2332,"mtime":1615408925186,"results":"148","hashOfConfig":"93"},{"size":3593,"mtime":1615411229181,"results":"149","hashOfConfig":"93"},{"size":2335,"mtime":1609443171381,"results":"150","hashOfConfig":"93"},{"size":5695,"mtime":1615278393804,"results":"151","hashOfConfig":"93"},{"size":4206,"mtime":1615312049349,"results":"152","hashOfConfig":"93"},{"size":2177,"mtime":1615594034887,"results":"153","hashOfConfig":"93"},{"size":2019,"mtime":1615577967381,"results":"154","hashOfConfig":"93"},{"size":2509,"mtime":1615509893133,"results":"155","hashOfConfig":"93"},{"size":1087,"mtime":1609698298870,"results":"156","hashOfConfig":"93"},{"size":2129,"mtime":1609787829917,"results":"157","hashOfConfig":"93"},{"size":8399,"mtime":1615839353024,"results":"158","hashOfConfig":"93"},{"size":1319,"mtime":1615408891726,"results":"159","hashOfConfig":"93"},{"size":5661,"mtime":1615278604883,"results":"160","hashOfConfig":"93"},{"size":720,"mtime":1609292281313,"results":"161","hashOfConfig":"93"},{"size":5208,"mtime":1615833778801,"results":"162","hashOfConfig":"93"},{"size":1545,"mtime":1610915800855,"results":"163","hashOfConfig":"93"},{"size":1398,"mtime":1609315610104,"results":"164","hashOfConfig":"93"},{"size":2675,"mtime":1615594218965,"results":"165","hashOfConfig":"93"},{"size":2640,"mtime":1615581027024,"results":"166","hashOfConfig":"93"},{"size":1082,"mtime":1615414240983,"results":"167","hashOfConfig":"93"},{"size":1571,"mtime":1615308742616,"results":"168","hashOfConfig":"93"},{"size":2393,"mtime":1615306840965,"results":"169","hashOfConfig":"93"},{"size":1033,"mtime":1615305489214,"results":"170","hashOfConfig":"93"},{"size":2529,"mtime":1615839894375,"results":"171","hashOfConfig":"93"},{"size":3148,"mtime":1615278226589,"results":"172","hashOfConfig":"93"},{"size":9643,"mtime":1615411713565,"results":"173","hashOfConfig":"93"},{"size":1820,"mtime":1615594156649,"results":"174","hashOfConfig":"93"},{"size":1698,"mtime":1609698259278,"results":"175","hashOfConfig":"93"},{"size":3390,"mtime":1609698189140,"results":"176","hashOfConfig":"93"},{"size":4071,"mtime":1615310278893,"results":"177","hashOfConfig":"93"},{"size":3690,"mtime":1609711953799,"results":"178","hashOfConfig":"93"},{"size":3190,"mtime":1609698573507,"results":"179","hashOfConfig":"93"},{"size":6388,"mtime":1609711923159,"results":"180","hashOfConfig":"93"},{"size":2274,"mtime":1609198425426,"results":"181","hashOfConfig":"93"},{"size":1110,"mtime":1608955313073,"results":"182","hashOfConfig":"93"},{"size":1243,"mtime":1609198444718,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},"r8y52",{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mythic/src/index.js",["401","402","403"],"//import './wdyr';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport { ApolloProvider, ApolloClient, InMemoryCache, from, split, HttpLink } from '@apollo/client';\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { meState, successfulRefresh } from './cache';\nimport { onError } from \"@apollo/client/link/error\";\nimport { RetryLink } from \"@apollo/client/link/retry\";\nimport HTTPPost from './components/utilities/HTTPPost';\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { setContext } from '@apollo/client/link/context';\nimport {SnackbarUtilsConfigurator, snackActions} from './components/utilities/Snackbar';\nimport {SnackbarProvider} from 'notistack';\n\nconst cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                \"Subscription.operationeventlog\": {\n                    merge(existing, incoming){\n                        return incoming;\n                    }\n                }\n            }\n        }\n    }\n});\nconst FailedRefresh = () =>{\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"user\");\n    meState({\n        loggedIn: false,\n        access_token: null,\n        refresh_token: null,\n        user: null\n    });\n}\nif (localStorage.getItem(\"user\") !== null){\n    meState({\n        loggedIn: true,\n        access_token: localStorage.getItem(\"access_token\"),\n        refresh_token: localStorage.getItem(\"refresh_token\"),\n        user: JSON.parse(localStorage.getItem(\"user\"))\n    });\n}else{\n    FailedRefresh();\n}\nconst retryLink = new RetryLink({\n  delay: {\n    initial: 20,\n    max: 300,\n    jitter: true\n  },\n  attempts: {\n    max: 2,\n    retryIf: (error, _operation) => !!error\n  }\n});\nconst httpLink = new HttpLink({\n    uri: window.location.origin + \"/graphql/\",\n    options: {\n        reconnect: true,   \n        connectionParams: {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('access_token')}`\n          }\n       }     \n    }\n});\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('access_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {\n  console.log(\"errors?\");\n  if (graphQLErrors) {\n    console.log(\"[graphQLError]\", graphQLErrors);\n    for (let err of graphQLErrors) {\n      switch (err.extensions.code) {\n        case 'forbidden':\n            snackActions.error(err.message);\n        case 'access-denied':\n        case 'start-failed':\n          // when AuthenticationError thrown in resolver\n            console.log(\"got start-failed error\");\n          // modify the operation context with a new token\n          const oldHeaders = operation.getContext().headers;\n          console.log(oldHeaders);\n          if(GetNewToken()){\n            operation.setContext({\n                headers: {\n                  ...oldHeaders,\n                 Authorization: \"Bearer \" + localStorage.getItem(\"access_token\"),\n                },\n              });\n              // retry the request, returning the new observable\n              return forward(operation);\n          }else{\n              //window.location.reload();\n          }\n          break;\n        default:\n            console.log(err);\n      }\n    }\n  }\n  if (networkError) {\n    console.log(\"[Network error]\", networkError);\n    switch (networkError.extensions.code) {\n        case 'access-denied':\n        case 'start-failed':\n          // when AuthenticationError thrown in resolver\n            console.log(\"got start-failed error\");\n          // modify the operation context with a new token\n          const oldHeaders = operation.getContext().headers;\n          console.log(oldHeaders);\n          if(GetNewToken()){\n            operation.setContext({\n                headers: {\n                  ...oldHeaders,\n                 Authorization: \"Bearer \" + localStorage.getItem(\"access_token\"),\n                },\n              });\n              // retry the request, returning the new observable\n              return forward(operation);\n          }else{\n            window.location.reload();\n          }\n          \n        default:\n            console.log(networkError);\n      }\n  }\n  \n});\n\nconst GetNewToken = () =>{\n    const response = HTTPPost('/refresh', {\"refresh_token\": localStorage.getItem(\"refresh_token\")}).then((response) => {\n            response.json().then(data => {\n                console.log(data)\n                if(\"access_token\" in data){\n                    successfulRefresh(data);\n                    console.log(\"successfully got new access_token\");\n                    return true;\n                }else{\n                    FailedRefresh();\n                    return false;\n                }\n            }).catch(error => {\n                console.log(\"Error trying to get json response in GetNewToken\", error.toString());\n                FailedRefresh();\n                return false;\n            });\n        }).catch(error => {\n            console.log(\"There was an error in GetNewToken!\", error.toString());\n            FailedRefresh();\n            return false;\n        });\n}\nconst websocketAddress =() =>{\n    return window.location.protocol === \"https:\" ? \"wss://\" + window.location.host + \"/graphql/\" : \"ws://\" + window.location.host + \"/graphql/\";\n}\n\nconst websocketLink = new WebSocketLink({\n     uri: websocketAddress(),\n     options: {\n       reconnect: true,\n       connectionParams: {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('access_token')}`\n          }\n       }\n     }\n    });\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  websocketLink,\n  authLink.concat(httpLink)\n)\nconst apolloClient = new ApolloClient({\n   link: from([errorLink, retryLink, splitLink]),\n    cache\n  });\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnackbarProvider anchorOrigin={{ horizontal: 'center', vertical: 'top' }}>\n      <SnackbarUtilsConfigurator />\n        <ApolloProvider client={apolloClient}>\n            <Router>\n                <App key=\"App\" />\n            </Router>\n        </ApolloProvider>\n    </SnackbarProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","/mythic/src/cache.js",[],"/mythic/src/components/App.js",[],"/mythic/src/components/utilities/HTTPPost.js",[],"/mythic/src/components/utilities/Snackbar.js",["404"],"import { useSnackbar } from 'notistack'\nimport React from 'react'\n\n\nlet useSnackbarRef = null;\n\nexport const SnackbarUtilsConfigurator = () => {\n  useSnackbarRef = useSnackbar();\n\n  return null;\n};\n\nexport const snackActions = {\n  success(msg, options) {\n    this.toast(msg, 'success', options)\n  },\n  warning(msg, options) {\n    this.toast(msg, 'warning', options)\n  },\n  info(msg, options) {\n    this.toast(msg, 'info', options)\n  },\n  error(msg, options) {\n    this.toast(msg, 'error', options)\n  },\n  toast(msg, variant = 'default', options) {\n    useSnackbarRef.enqueueSnackbar(msg, { variant, ...options })\n  }\n}\n","/mythic/src/components/utilities/LoggedInRoute.js",[],"/mythic/src/components/TopAppBar.js",[],"/mythic/src/components/utilities/useDarkMode.js",[],"/mythic/src/themes/GlobalStyles.js",[],"/mythic/src/themes/Themes.js",[],"/mythic/src/components/pages/Login/LoginForm.js",["405"],"import React from 'react';\nimport {Button} from '@material-ui/core';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\nimport logo from '../../../assets/mythic.svg';\nimport { Redirect } from 'react-router-dom';\nimport { meState, successfulLogin } from '../../../cache';\nimport { useReactiveVar } from '@apollo/client';\nimport { useSnackbar } from 'notistack';\n\nexport function LoginForm(props){\n    const me = useReactiveVar(meState);\n    const { enqueueSnackbar } = useSnackbar();\n    const [username, setUsername] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const submit = e => {\n        e.preventDefault();\n        if( username === \"\" || password === \"\"){\n            enqueueSnackbar(\"Username and Password required\", {variant: \"warning\"});\n            return;\n        }\n        const requestOptions = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({username, password})\n        };\n        const response = fetch('/auth', requestOptions).then((response) => {\n            response.json().then(data => {\n                //console.log(data)\n                if(\"access_token\" in data){\n                    successfulLogin(data);\n                }else{\n                    enqueueSnackbar(\"Invalid Username or Password\", {\n                            variant: 'warning',\n                            autoHideDuration: 2000\n                        });\n                    console.log(\"Error\", data);\n                }\n            }).catch(error => {\n                enqueueSnackbar(\"Error getting JSON from server\", {\n                                variant: 'warning',\n                                autoHideDuration: 2000\n                            });\n                console.log(\"Error trying to get json response\", error.toString());\n            });\n        }).catch(error => {\n            enqueueSnackbar(\"Error talking to server\", {\n                                variant: 'warning',\n                                autoHideDuration: 2000\n                            });\n            console.log(\"There was an error!\", error.toString());\n        });\n    }\n    const onUsernameChange = (name, value, error) => {\n        setUsername(value);\n    }\n    const onPasswordChange = (name, value, error) => {\n        setPassword(value);\n    }\n    const redirectPath = () => {\n        const locationState = props.location.state;\n        return locationState && locationState.from ? locationState.from.pathname : '/new/';\n    }\n    return (\n        <div style={{justifyContent: \"center\", display: \"flex\"}}>\n        { \n            me.loggedIn ?\n                (\n                    <Redirect to={redirectPath()}/>\n                )\n               : (\n                    <div>\n                    <img src={logo} height=\"400px\" alt=\"Mythic logo\"/>\n                        <form onSubmit={submit}>\n                            <MythicTextField name='username' value={username} onChange={onUsernameChange} width={30} />\n                            <MythicTextField name='password' type=\"password\" value={password} onChange={onPasswordChange} width={30} />\n                            <Button type=\"submit\" color=\"primary\" onClick={submit} variant=\"contained\" style={{marginRight: \"10px\"}}>Login</Button>\n                        </form>\n                    </div>\n                )\n        }\n        </div>\n  )\n}\n\n","/mythic/src/components/pages/Settings/Settings.js",[],"/mythic/src/components/pages/Logout/Logout.js",[],"/mythic/src/components/pages/PayloadTypes/PayloadTypes.js",[],"/mythic/src/components/pages/CreatePayload/CreatePayload.js",[],"/mythic/src/components/pages/EventFeed/EventFeed.js",[],"/mythic/src/components/pages/BrowserScripts/BrowserScripts.js",["406","407"],"import React, {useEffect}  from 'react';\nimport { gql, useQuery, useMutation, useLazyQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\nimport { meState } from '../../../cache';\nimport {BrowserScriptsTable} from './BrowserScriptsTable';\nimport {BrowserScriptsOperationsTable} from './BrowserScriptsOperationsTable';\nimport {snackActions} from '../../utilities/Snackbar';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {muiTheme} from '../../../themes/Themes';\n\n\nconst GET_BrowserScripts = gql`\nquery GetBrowserScripts($operator_id: Int!) {\n  browserscript(where: {operator_id: {_eq: $operator_id}}) {\n    active\n    author\n    user_modified\n    script\n    payloadtype {\n      ptype\n    }\n    name\n    id\n    creation_time\n    container_version_author\n    container_version\n    command {\n      cmd\n    }\n  }\n}\n `;\nconst SUB_BrowserScripts = gql`\nsubscription SubscribeBrowserScripts($operator_id: Int!) {\n  browserscript(where: {operator_id: {_eq: $operator_id}}) {\n    active\n    author\n    user_modified\n    script\n    payloadtype {\n      ptype\n    }\n    name\n    id\n    creation_time\n    container_version_author\n    container_version\n    command {\n      cmd\n    }\n  }\n}\n `;\n const GET_OperationBrowserScripts = gql`\nquery GetOperationBrowserScripts($operation_id: Int!) {\n  browserscriptoperation(where: {operation_id: {_eq: $operation_id}}) {\n    browserscript{\n        active\n        author\n        user_modified\n        script\n        payloadtype {\n          ptype\n        }\n        name\n        id\n        creation_time\n        container_version_author\n        container_version\n        command {\n          cmd\n        }\n      }\n   operation{\n    admin{\n        username\n    }\n   }\n  }\n}\n `;\nconst SUB_OperationBrowserScripts = gql`\nsubscription SubscribeOperationBrowserScripts($operation_id: Int!) {\n  browserscriptoperation(where: {operation_id: {_eq: $operation_id}}) {\n    browserscript{\n        active\n        author\n        user_modified\n        script\n        payloadtype {\n          ptype\n        }\n        name\n        id\n        creation_time\n        container_version_author\n        container_version\n        command {\n          cmd\n        }\n      }\n   operation{\n    admin{\n        username\n    }\n   }\n  }\n}\n `;\nconst updateBrowserScriptActive = gql`\nmutation updateBrowserScriptActive($browserscript_id: Int!, $active: Boolean!) {\n  update_browserscript_by_pk(pk_columns: {id: $browserscript_id}, _set: {active: $active}) {\n    id\n  }\n}\n`;\nconst updateBrowserScriptScript = gql`\nmutation updateBrowserScriptScript($browserscript_id: Int!, $script: String!) {\n  update_browserscript_by_pk(pk_columns: {id: $browserscript_id}, _set: {script: $script, user_modified: true}) {\n    id\n  }\n}\n`;\nconst updateBrowserScriptRevert = gql`\nmutation updateBrowserScriptRevert($browserscript_id: Int!, $script: String!) {\n  update_browserscript_by_pk(pk_columns: {id: $browserscript_id}, _set: {script: $script, user_modified: false}) {\n    id\n  }\n}\n`;\n\nexport function BrowserScripts(props){\n    const me = useReactiveVar(meState);\n    const { loading, error, data, subscribeToMore } = useQuery(GET_BrowserScripts, {variables: {operator_id: me.user.id}});\n    const [getOperationScripts, {subscribeToMore: subscribeToMoreOperation, data: dataOperations, loading: loadingOperations}] = useLazyQuery(GET_OperationBrowserScripts);\n    const [toggleActive] = useMutation(updateBrowserScriptActive, {\n        onCompleted: data => {\n            snackActions.success(\"Successfully Updated!\", {autoHideDuration: 1000});\n        },\n        onError: data => {\n            console.error(data);\n        }\n    });\n    const [updateScript] = useMutation(updateBrowserScriptScript, {\n        onCompleted: data => {\n            snackActions.success(\"Successfully Updated!\", {autoHideDuration: 1000});\n        },\n        onError: data => {\n            console.error(data);\n        }\n    });\n    const [revertScript] = useMutation(updateBrowserScriptRevert, {\n        onCompleted: data => {\n            snackActions.success(\"Successfully Updated!\", {autoHideDuration: 1000});\n        },\n        onError: data => {\n            console.error(data);\n        }\n    });\n    useEffect( () => {\n        getOperationScripts({variables: {operation_id: me.user.current_operation_id}});\n    }, []);\n    if (loading || loadingOperations) {\n     return <LinearProgress style={{marginTop: \"20px\" }}/>;\n    }\n    if (error) {\n     console.error(error);\n     snackActions.error(\"Failed to get browser script data\");\n     return null;\n    }\n    const onToggleActive = ({browserscript_id, active}) => {\n        toggleActive({variables: {browserscript_id, active}});\n    }\n    const onSubmitEdit = ({browserscript_id, script}) => {\n        updateScript({variables: {browserscript_id, script}});\n    }\n    const onRevert = ({browserscript_id, script}) => {\n        revertScript({variables:{browserscript_id, script}});\n    }\n    const onToggleOperation = ({browserscript_id}) => {\n    \n    }\n    return (\n    <React.Fragment>\n        <BrowserScriptsTable {...data} onToggleActive={onToggleActive} onSubmitEdit={onSubmitEdit} onRevert={onRevert} onToggleOperation={onToggleOperation} subscribeToMoreMessages={() => subscribeToMore({\n            document: SUB_BrowserScripts,\n            variables: {operator_id: me.user.id},\n            shouldResubscribe: true,\n            updateQuery: (prev, {subscriptionData} ) => {\n                console.log(\"in subscription\", subscriptionData);\n            }\n        })}\n        />\n        {dataOperations && (\n        <BrowserScriptsOperationsTable {...dataOperations} subscribeToMoreMessages={() => subscribeToMoreOperation({\n            document: SUB_OperationBrowserScripts,\n            variables: {operation_id: me.user.current_operation_id},\n            shouldResubscribe: true,\n            updateQuery: (prev, {subscriptionData} ) => {\n                console.log(\"in subscription for operation\", subscriptionData);\n            }\n        })}\n        />)}\n    </React.Fragment>\n    );\n}\n","/mythic/src/components/pages/Payloads/Payloads.js",[],"/mythic/src/components/pages/Home/Home.js",[],"/mythic/src/components/pages/SingleTaskView/SingleTaskView.js",["408","409","410","411","412","413"],"import React, {useEffect} from 'react';\nimport {TaskDisplay} from '../Callbacks/TaskDisplay';\nimport {useSubscription, gql, useLazyQuery } from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport  {useParams} from \"react-router-dom\";\nimport {useReactiveVar} from '@apollo/client';\nimport { meState } from '../../../cache';\nimport {getBrowserScripts, getSupportScripts, scriptsQuery, sort_tableDefinition, escapeHTMLDefinition} from '../../utilities/BrowserScriptHelpers';\n\nconst subTaskQuery = gql`\nsubscription subTaskQuery($task_id: Int!) {\n  task_by_pk(id: $task_id) {\n        comment\n        commentOperator{\n            username\n        }\n        completed\n        id\n        operator{\n            username\n        }\n        display_params\n        original_params\n        status\n        timestamp\n        command {\n          cmd\n          id\n        }\n        responses{\n            id\n        }\n        opsec_pre_blocked\n        opsec_pre_bypassed\n        opsec_post_blocked\n        opsec_post_bypassed\n    }\n}`;\nconst escapeHTML = escapeHTMLDefinition;\nconst sort_table = sort_tableDefinition;\nvar browserscripts = {};\nvar support_scripts = {};\nexport function SingleTaskView(props){\n   const {taskId} = useParams();\n   const [commandId, setCommandId] = React.useState(0);\n   const me = useReactiveVar(meState);\n   const [getScripts, { loading: scriptLoading}] = useLazyQuery(scriptsQuery, {\n        onCompleted: data => {\n            console.log(data);\n            //consolidate the browserscriptoperation and browserscript \n            // operation scripts get applied instead of operator-specific scripts\n            \n            try{\n                eval(getSupportScripts(data));\n                eval(getBrowserScripts(data));\n            }catch(error){\n                console.error(error);\n            }\n            console.log(browserscripts);\n            console.log(support_scripts);\n        },\n        onError: data => {\n            console.log(\"error!\", data)\n        }\n    });\n   const {loading, error, data} = useSubscription(subTaskQuery, {\n     variables: {task_id: parseInt(taskId)},\n     onSubscriptionData: completedData => {\n        setCommandId(completedData.subscriptionData.data.task_by_pk.command.id);\n     }\n    });\n    useEffect( () => {\n        getScripts({variables: {operator_id: me.user.id, operation_id: me.user.current_operation_id } });\n    }, []);\n    if (loading) {\n     return <LinearProgress style={{marginTop: \"10px\"}}/>;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n  return (\n    <div style={{marginTop: \"10px\", maxHeight: \"calc(92vh)\"}}>\n        <TaskDisplay task={data.task_by_pk} command_id={commandId} browserscripts={browserscripts} />\n    </div>\n  );\n}\n//\n","/mythic/src/components/pages/C2Profiles/C2Profiles.js",[],"/mythic/src/components/pages/Callbacks/Callbacks.js",["414"],"import React  from 'react';\nimport {useSubscription, gql } from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {CallbacksTable} from './CallbacksTable';\nimport {CallbacksGraph} from './CallbacksGraph';\nimport { meState } from '../../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport {CallbacksTabs} from './CallbacksTabs';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport TocIcon from '@material-ui/icons/Toc';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport {HeightsDialog} from './HeightsDialog';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\n\nconst SUB_Callbacks = gql`\nsubscription CallbacksSubscription ($operation_id: Int!){\n  callback(where: {active: {_eq: true}, operation_id: {_eq: $operation_id}}, order_by: {id: desc}) {\n    architecture\n    description\n    domain\n    external_ip\n    host\n    id\n    integrity_level\n    ip\n    last_checkin\n    locked\n    sleep_info\n    pid\n    os\n    user\n    agent_callback_id\n    operation_id\n    payload {\n      payloadtype {\n        ptype\n        id\n      }\n    }\n    callbacktokens(where: {deleted: {_eq: false}}) {\n      token {\n        TokenId\n        id\n      }\n    }\n  }\n}\n `;\nconst SUB_Edges = gql`\nsubscription CallbacksSubscription ($operation_id: Int!){\n  callbackgraphedge(where: {operation_id: {_eq: $operation_id}}, order_by: {id: desc}) {\n    id\n    end_timestamp\n    direction\n    destination {\n      active\n      id\n      operation_id\n      user\n      host\n      payload {\n        payloadtype {\n          ptype\n          id\n        }\n      }\n      callbackc2profiles {\n        c2profile {\n          name\n        }\n      }\n    }\n    source {\n      active\n      id\n      user\n      operation_id\n      host\n      payload {\n        payloadtype {\n          ptype\n          id\n        }\n      }\n      callbackc2profiles {\n        c2profile {\n          name\n        }\n      }\n    }\n    c2profile {\n      id\n      is_p2p\n      name\n    }\n  }\n}\n `;\n const useStyles = makeStyles((theme) => ({\n  root: {\n    transform: 'translateZ(0px)',\n    flexGrow: 1,\n  },\n  speedDial: {\n    position: 'absolute',\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n      top: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  },\n}));\nexport function Callbacks(props){\n    const me = useReactiveVar(meState);\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [topDisplay, setTopDisplay] = React.useState(\"table\");\n    const [openTabs, setOpenTabs] = React.useState([]);\n    const [clickedTabId, setClickedTabId] = React.useState(\"\");\n    const [heights, setHeights] = React.useState({top: 30, bottom: 60});\n    const [openHeightsDialog, setOpenHeightsDialog] = React.useState(false);\n    const { loading, error, data } = useSubscription(SUB_Callbacks, {\n        variables: {operation_id: me.user.current_operation_id}, fetchPolicy: \"network-only\",\n        shouldResubscribe: true\n    });\n    const { loading: loadingEdges , error: errorEdges, data: dataEdges } = useSubscription(SUB_Edges, {\n        variables: {operation_id: me.user.current_operation_id}, fetchPolicy: \"network-only\",\n        shouldResubscribe: true\n    });\n    if (loading || loadingEdges) {\n     return <LinearProgress style={{marginTop: \"20px\"}} />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    \n    const onOpenTab = ({tabID, tabType, callbackID}) => {\n        let found = false;\n        openTabs.forEach( (tab) => {\n            if(tab.tabID === tabID) found = true;\n        });\n        console.log(tabID, tabType, callbackID, found);\n        if(!found){\n            console.log(openTabs);\n            const tabs = [...openTabs, {tabID, tabType, callbackID}];\n            console.log(\"setting openTabs: \", tabs);\n            setOpenTabs(tabs);\n        }\n        setClickedTabId(tabID);\n    }\n    const onCloseTab = ({tabID, index}) => {\n        const tabSet = openTabs.filter( (tab) => {\n            return tab.tabID !== tabID;\n        });\n        console.log(\"closing tab and setting to:\", tabSet);\n        setOpenTabs(tabSet);\n    }\n    const clearSelectedTab = () => {\n        setClickedTabId(\"\");\n    }\n    const actions = [\n      { icon: <TocIcon />, name: 'Table layout', onClick: () => {setTopDisplay(\"table\")}},\n      { icon: <AssessmentIcon />, name: 'Graph layout', onClick: () => {setTopDisplay(\"graph\")}},\n      { icon: <AspectRatioIcon />, name: 'Adjust Top/Bottom Size' , onClick: () => {setOpenHeightsDialog(true);setOpen(false);}},\n    ];\n    const getTopDisplay = () => {\n        switch(topDisplay){\n            case \"graph\":\n                return (<CallbacksGraph maxHeight={`calc(${heights.top}vh)`} topHeight={heights.top} key={\"callbacksgraph\"} onOpenTab={onOpenTab} callbacks={data.callback} callbackgraphedges={dataEdges.callbackgraphedge} />)\n            case \"table\":\n            default:\n                return (<CallbacksTable maxHeight={`calc(${heights.top}vh)`} topHeight={heights.top} key={\"callbackstable\"} onOpenTab={onOpenTab} callbacks={data.callback} callbackgraphedges={dataEdges.callbackgraphedge} />)\n        }\n    }\n    const onSubmitHeights = (newHeights) => {\n        setHeights(newHeights);\n        setOpen(false);\n    }\n    return (\n        <div style={{maxWidth: \"100%\",height: \"calc(95vh)\"}}>\n            \n            {getTopDisplay()}\n            <CallbacksTabs onCloseTab={onCloseTab} clearSelectedTab={clearSelectedTab} tabHeight={heights.bottom} maxHeight={`calc(${heights.bottom}vh)`} key={\"callbackstabs\"} clickedTabId={clickedTabId} openTabs={openTabs} callbacks={data.callback} />\n            <SpeedDial\n              ariaLabel=\"SpeedDial example\"\n              className={classes.speedDial}\n              icon={<SpeedDialIcon />}\n              onClose={()=>{setOpen(false);}}\n              onOpen={()=>{setOpen(true);}}\n              FabProps={{ color: \"secondary\" }}\n              open={open}\n              direction=\"down\"\n            >\n              {actions.map((action) => (\n                <SpeedDialAction\n                  key={action.name}\n                  icon={action.icon}\n                  tooltipTitle={action.name}\n                  onClick={action.onClick}\n                />\n              ))}\n            </SpeedDial>\n            <MythicDialog fullWidth={true} maxWidth=\"sm\" open={openHeightsDialog} \n                    onClose={()=>{setOpenHeightsDialog(false);setOpen(false);}} \n                    innerDialog={<HeightsDialog onClose={()=>{setOpenHeightsDialog(false);setOpen(false);}} heights={heights} onSubmit={onSubmitHeights} />}\n                />\n        </div>\n    );\n}\n","/mythic/src/components/EventFeedNotifications.js",[],"/mythic/src/components/TopAppBarNotifications.js",[],"/mythic/src/components/pages/Callbacks/HeightsDialog.js",[],"/mythic/src/components/pages/Callbacks/CallbacksTabs.js",["415"],"import React, {useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport {CallbacksTabsTaskingLabel, CallbacksTabsTaskingPanel} from './CallbacksTabsTasking';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport function CallbacksTabs(props) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const getCallbackData = (tabID) => {\n        return props.callbacks.filter( c => c.id === tabID.callbackID );\n    }\n    const onCloseTab = ({tabID, index}) =>{\n        if(index > 0){\n            setValue(index-1);\n        }else{\n            setValue(0);\n        }\n        props.onCloseTab({tabID, index});\n    }\n    useEffect( () => {\n        for(let i = 0; i < props.openTabs.length; i++){     \n            if( props.openTabs[i].tabID === props.clickedTabId ){\n                setValue(i);\n            }\n        }\n        props.clearSelectedTab();\n    }, [props.clickedTabId, props.openTabs]);\n  return (\n    <div className={classes.root} style={{maxHeight: props.maxHeight, height: props.maxHeight, background: \"transparent\"}}>\n    {props.openTabs.length > 0 ? (\n          <AppBar position=\"static\" color=\"default\">\n            <Tabs \n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n              aria-label=\"scrollable auto tabs example\"\n            >\n            {\n                props.openTabs.map( (tab, index) => (\n                    <CallbacksTabsTaskingLabel onCloseTab={onCloseTab} key={\"tablabel\" + tab.tabID + tab.tabType} tabInfo={tab} index={index}/>\n                ))\n            }\n            </Tabs>\n          </AppBar>\n      ) : (null)\n      }\n      {\n        props.openTabs.map( (tab, index) => (\n            <CallbacksTabsTaskingPanel maxHeight={props.tabHeight} style={{height:`calc(${props.tabHeight}vh)`, maxHeight:`calc(${props.tabHeight}vh)`, position: \"relative\", overflow: \"auto\"}} key={\"tabpanel\" + tab.tabID + tab.tabType} tabInfo={tab} value={value} index={index} callback={getCallbackData(tab)}/>\n        ))\n      }\n    </div>\n  )\n}\n\n","/mythic/src/components/pages/Callbacks/CallbacksGraph.js",["416","417","418","419","420","421"],"import React, {useRef, useEffect, useState} from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {drawC2PathElements, getNodeEdges} from './C2PathDialog';\nimport {Button} from '@material-ui/core';\nimport {muiTheme} from '../../../themes/Themes';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport Paper from '@material-ui/core/Paper';\nimport Grow from '@material-ui/core/Grow';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport {useMutation } from '@apollo/client';\nimport {saveSvgAsPng} from 'save-svg-as-png';\nimport {hideCallbackMutation, removeEdgeMutation, addEdgeMutation} from './CallbackMutations';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport {MythicSelectFromListDialog} from '../../MythicComponents/MythicSelectFromListDialog';\nimport {ManuallyAddEdgeDialog} from './ManuallyAddEdgeDialog';\nimport {gql, useLazyQuery } from '@apollo/client';\nimport { useSnackbar } from 'notistack';\nimport {TaskParametersDialog} from './TaskParametersDialog';\nimport {createTaskingMutation} from './CallbacksTabsTasking';\n\nexport const loadedLinkCommandsQuery = gql`\nquery loadedLinkCommandsQuery ($callback_id: Int!){\n  loadedcommands(where: {callback_id: {_eq: $callback_id}, command: {is_link: {_eq: true}, deleted: {_eq: false}}}) {\n    command {\n        id\n        cmd\n        help_cmd\n        description\n        needs_admin\n    }\n  }\n}\n`;\n\nexport function CallbacksGraph(props){\n    const dagreRef = useRef(null);    \n    const { enqueueSnackbar } = useSnackbar();\n    const dropdownAnchorRef = React.useRef(null);\n    const [dropdownOpen, setDropdownOpen] = React.useState(false);\n    const [reZoom, setReZoom] = useState(true);\n    //used for creating a task to do a link command\n    const [linkCommands, setLinkCommands] = React.useState([]);\n    const [openParametersDialog, setOpenParametersDialog] = React.useState(false);\n    const [openSelectLinkCommandDialog, setOpenSelectLinkCommandDialog] = React.useState(false);\n    const [selectedLinkCommand, setSelectedLinkCommand] = useState();\n    const [selectedCallback, setSelectedCallback] = useState();\n    const [manuallyRemoveEdgeDialogOpen, setManuallyRemoveEdgeDialogOpen] = useState(false);\n    const [manuallyAddEdgeDialogOpen, setManuallyAddEdgeDialogOpen] = useState(false);\n    const [pickLinkTaskDialogOpen, setPickLinkTaskDialogOpen] = useState(false);\n    const [edgeOptions, setEdgeOptions] = useState([]); // used for manuallyRemoveEdgeDialog\n    const [addEdgeSource, setAddEdgeSource] = useState(null); // used for manuallyAddEdgeDialog\n    const [getLinkCommands, {loading, error}] = useLazyQuery(loadedLinkCommandsQuery, {fetchPolicy: \"network-only\",\n        onCompleted: data => {\n            console.log(data);\n            \n            if(data.loadedcommands.length === 1){\n                //no need for a popup, there's only one possible command\n                setSelectedLinkCommand(data.loadedcommands[0].command);\n                setOpenParametersDialog(true);\n            }else if(data.loadedcommands.length === 0){\n                //no possible command can be used, do a notification\n                enqueueSnackbar(\"No commands loaded that are 'link' commands\", {variant: \"warning\"});\n            }else{\n                const cmds = data.loadedcommands.map( (cmd) => { return {...cmd, display: cmd.command.cmd} } );\n                setLinkCommands(cmds);\n                setSelectedLinkCommand(cmds[0].command);\n                setOpenSelectLinkCommandDialog(true);\n            }\n        }});\n    const onSubmitSelectedLinkCommand = (cmd) => {\n        setSelectedLinkCommand(cmd.command);\n        console.log(cmd);\n        setOpenParametersDialog(true);\n    }\n    const [createTask] = useMutation(createTaskingMutation, {\n        update: (cache, {data}) => {\n            if(data.createTask.status === \"error\"){\n                enqueueSnackbar(data.createTask.error, {variant: \"error\"});\n            }else{\n                enqueueSnackbar(\"task created\", {variant: \"success\"});\n            }\n            \n        }\n    });\n    const submitParametersDialog = (cmd, parameters, files) => {\n        setOpenParametersDialog(false);\n        createTask({variables: {callback_id: selectedCallback.id, command: cmd, params: parameters, files}});\n    }\n    const [viewConfig, setViewConfig] = React.useState({\n        rankDir: \"LR\",\n        label_components: [\"id\", \"user\"],\n        packet_flow_view: true,\n        include_disconnected: true,\n        show_all_nodes: false\n    });\n    const [hideCallback] = useMutation(hideCallbackMutation, {\n        update: (cache, {data}) => {\n            console.log(data);\n        }\n    });\n    const [manuallyRemoveEdge] = useMutation(removeEdgeMutation, {\n        update: (cache, {data}) => {\n            console.log(data);\n        }\n    });\n    const [manuallyAddEdge] = useMutation(addEdgeMutation, {\n        update: (cache, {data}) => {\n            console.log(data);\n        }\n    });\n    const onSubmitManuallyRemoveEdge = (edge) => {\n        if(edge === \"\"){return}\n        manuallyRemoveEdge({variables: {edge_id: edge.edge_id, end_timestamp: (new Date()).toISOString()}});\n    }\n    const onSubmitManuallyAddEdge = (source_id, profile, destination) => {\n        if(profile === \"\" || destination === \"\"){return}\n        manuallyAddEdge({variables: {source_id: source_id, profile_id: profile.id, destination_id: destination.id}});\n        console.log(\"want to submit: \", source_id, profile, destination);\n    }\n    const node_events = {\n        \"mouseover\": (parent, node, d) => {return},\n        \"mouseout\": (parent, node, d) => {return},\n        \"click\": (parent, node, d) => {return},\n        \"contextmenu\":  [\n\t        {\n\t\t        title: 'Hide Callback',\n\t\t        action: function(g, elm) {\n\t\t            hideCallback({variables: {callback_id: elm.node.id}});\n\t\t        }\n\t        },\n\t        {\n\t\t        title: 'Interact',\n\t\t        action: function(g, elm){\n\t\t            props.onOpenTab({tabType: \"interact\", tabID: elm.node.id + \"interact\", callbackID: elm.node.id});\n\t            }\n            },\n            {\n\t            title: \"Manually Remove Edge\",\n\t            action: function(g, elm){\n\t                const edges = getNodeEdges(g, elm.node.id);\n\t                const opts = edges.reduce( (prev, e) => {\n\t                    const fulledg = g.edge(e.v, e.w, e.name);\n\t                    if(fulledg.end_timestamp === null){\n\t                        if(fulledg.direction === 1){\n\t                            if(viewConfig[\"packet_flow_view\"]){\n\t                                return [...prev, {...fulledg, \"display\": e.w + \" --> \" + e.name + \" --> \" + e.v}];\n\t                            }else{\n\t                                return [...prev, {...fulledg, \"display\": e.v + \" --> \" + e.name + \" --> \" + e.w}];\n\t                            }\n\t                        }else{\n\t                            return [...prev, {...fulledg, \"display\": e.w + \" --> \" + e.name + \" --> \" + e.v}];\n\t                        }\n\t                        \n\t                    }else{\n\t                        return [...prev];\n\t                    }\n\t                }, []);\n\t                setEdgeOptions(opts);\n\t                setManuallyRemoveEdgeDialogOpen(true);\n                }\n            },\n            {\n                title: \"Manually Add Edge\",\n                action: function(g, elm){\n                    setAddEdgeSource(elm.node);\n                    setManuallyAddEdgeDialogOpen(true);\n                }\n\t        },\n\t        {\n\t            title: \"Task Callback for Edge\",\n\t            action: function(g, elm){\n\t                setLinkCommands([]);\n                    setSelectedLinkCommand(null);\n                    setSelectedCallback(null);\n\t                getLinkCommands({variables: {callback_id: elm.node.id} });\n\t                setSelectedCallback(elm.node);\n\t                \n                }\n            },\n        ]       \n    }\n    const handleDropdownToggle = (evt) => {\n        evt.stopPropagation();\n        setDropdownOpen((prevOpen) => !prevOpen);\n      };\n    const handleMenuItemClick = (event, index) => {\n        options[index].click();\n        setDropdownOpen(false);\n    };\n    const options = [{name: 'Toggle Disconnected', click: () => {\n                        const view = {...viewConfig, include_disconnected: !viewConfig[\"include_disconnected\"]};\n                        drawC2PathElements([...props.callbackgraphedges], dagreRef, true, view, node_events);\n                        setViewConfig(view);\n                     }}, \n                     {name: 'Toggle All Nodes', click: () => {\n                        const view = {...viewConfig, show_all_nodes: !viewConfig[\"show_all_nodes\"]};\n                        drawC2PathElements([...props.callbackgraphedges], dagreRef, true, view, node_events);\n                        setViewConfig(view);\n                     }},\n                     {name: 'Autosize', click: () => {\n                        drawC2PathElements([...props.callbackgraphedges], dagreRef, true, viewConfig, node_events);\n                     }}, \n                     {name: 'Change Layout', click: () => {\n                        if(viewConfig[\"rankDir\"] === \"LR\"){\n                            const view = {...viewConfig, rankDir: \"BT\"};\n                            drawC2PathElements([...props.callbackgraphedges], dagreRef, true, view, node_events);\n                            setViewConfig(view);\n                        }else{\n                            const view = {...viewConfig, rankDir: \"LR\"};\n                            drawC2PathElements([...props.callbackgraphedges], dagreRef, true, view, node_events);\n                            setViewConfig(view);\n                        }\n                     }},\n                     {name: \"Change View\", click: () => {\n                        const view = {...viewConfig, packet_flow_view: !viewConfig[\"packet_flow_view\"]};\n                        drawC2PathElements([...props.callbackgraphedges], dagreRef, true, view, node_events);\n                        setViewConfig(view);\n                     }},\n                     {name: \"Download Graph\", click: () => {\n                        saveSvgAsPng(document.getElementById(\"callbacksgraph\"), \"diagram.png\");\n                     }}];\n    const getConfigString = () => {\n        let config = \"\";\n        config += viewConfig[\"include_disconnected\"] ? \"Showing Disconnected Edges, \" : \"Showing Active Edges, \";\n        config += viewConfig[\"show_all_nodes\"] ? \"Showing all nodes, \" : \"Showing Active Nodes, \";\n        config += \"Layout: \" + viewConfig[\"rankDir\"] + \", \";\n        config += viewConfig[\"packet_flow_view\"] ? \"Showing Egress Routes\" : \"Showing Connections\";\n        return config;\n    }\n    const handleClose = (event) => {\n        if (dropdownAnchorRef.current && dropdownAnchorRef.current.contains(event.target)) {\n          return;\n        }\n        setDropdownOpen(false);\n      };\n    useEffect( () => {\n        const allEdges = [...props.callbackgraphedges];\n        drawC2PathElements(allEdges, dagreRef, reZoom, viewConfig, node_events);\n        setReZoom(false);\n    }, [props.callbackgraphedges])\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" ref={dropdownAnchorRef} aria-label=\"split button\" style={{marginTop: \"10px\", backgroundColor: muiTheme.palette.info.main}}>\n                <Button size=\"small\" onClick={(evt) => {evt.stopPropagation();}} style={{backgroundColor: muiTheme.palette.info.main}}>Actions</Button>\n                 <Button\n                    style={{backgroundColor: muiTheme.palette.info.main}} \n                    size=\"small\"\n                    aria-controls={dropdownOpen ? 'split-button-menu' : undefined}\n                    aria-expanded={dropdownOpen ? 'true' : undefined}\n                    aria-haspopup=\"menu\"\n                    onClick={handleDropdownToggle}\n                  >\n                    <ArrowDropDownIcon style={{backgroundColor: muiTheme.palette.info.main}}/>\n                  </Button>\n            </ButtonGroup>\n            {getConfigString()}\n            <Popper open={dropdownOpen} anchorEl={dropdownAnchorRef.current} role={undefined} transition disablePortal>\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  style={{\n                    transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                  }}\n                >\n                  <Paper>\n                    <ClickAwayListener onClickAway={handleClose}>\n                      <MenuList id=\"split-button-menu\">\n                        {options.map((option, index) => (\n                          <MenuItem\n                            key={option.name}\n                            onClick={(event) => handleMenuItemClick(event, index)}\n                          >\n                            {option.name}\n                          </MenuItem>\n                        ))}\n                      </MenuList>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n            <MythicDialog fullWidth={true} maxWidth=\"sm\" open={manuallyRemoveEdgeDialogOpen}\n                    onClose={()=>{setManuallyRemoveEdgeDialogOpen(false);}} \n                    innerDialog={<MythicSelectFromListDialog onClose={()=>{setManuallyRemoveEdgeDialogOpen(false);}}\n                                        onSubmit={onSubmitManuallyRemoveEdge} options={edgeOptions} title={\"Manually Remove Edge\"} action={\"remove\"} />}\n                />\n            <MythicDialog fullWidth={true} maxWidth=\"sm\" open={manuallyAddEdgeDialogOpen}\n                    onClose={()=>{setManuallyAddEdgeDialogOpen(false);}} \n                    innerDialog={<ManuallyAddEdgeDialog onClose={()=>{setManuallyAddEdgeDialogOpen(false);}}\n                                        onSubmit={onSubmitManuallyAddEdge} source={addEdgeSource} />}\n                />\n            <MythicDialog fullWidth={true} maxWidth=\"md\" open={openParametersDialog} \n                    onClose={()=>{setOpenParametersDialog(false);}} \n                    innerDialog={<TaskParametersDialog command={selectedLinkCommand} callback={selectedCallback} onSubmit={submitParametersDialog} onClose={()=>{setOpenParametersDialog(false);}} />}\n                />\n            <MythicDialog fullWidth={true} maxWidth=\"sm\" open={openSelectLinkCommandDialog}\n                    onClose={()=>{setOpenSelectLinkCommandDialog(false);}} \n                    innerDialog={<MythicSelectFromListDialog onClose={()=>{setOpenSelectLinkCommandDialog(false);}}\n                                        onSubmit={onSubmitSelectedLinkCommand} options={linkCommands} title={\"Select Link Command\"} action={\"select\"} />}\n                />\n            <div style={{\"maxWidth\": \"100%\", \"overflow\": \"auto\", height: \"calc(\" + props.topHeight + \"vh)\"}}>\n                <svg id=\"callbacksgraph\" ref={dagreRef} width=\"100%\" height=\"98%\"></svg> \n            </div>\n        </React.Fragment>\n    );\n}\n\n","/mythic/src/components/MythicComponents/MythicDialog.js",[],"/mythic/src/components/pages/Callbacks/CallbacksTable.js",[],"/mythic/src/components/MythicComponents/MythicTextField.js",[],"/mythic/src/components/pages/Callbacks/CallbacksTabsTasking.js",["422","423","424","425","426","427","428","429","430","431"],"import {MythicTabPanel, MythicTabLabel} from '../../../components/MythicComponents/MythicTabPanel';\nimport { IconButton } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport React, {useEffect, useRef} from 'react';\nimport {TextField} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {useQuery, gql, useMutation, useLazyQuery } from '@apollo/client';\nimport { TaskDisplay } from './TaskDisplay';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { useSnackbar } from 'notistack';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport {TaskParametersDialog} from './TaskParametersDialog';\nimport {CallbacksTabsTaskingInput} from './CallbacksTabsTaskingInput';\nimport {useReactiveVar} from '@apollo/client';\nimport { meState } from '../../../cache';\nimport {getBrowserScripts, getSupportScripts, scriptsQuery, sort_tableDefinition, escapeHTMLDefinition} from '../../utilities/BrowserScriptHelpers';\n\n\nexport function CallbacksTabsTaskingLabel(props){\n    return (\n        <MythicTabLabel label={\"Callback: \" + props.tabInfo.callbackID} {...props}/>\n    )\n}\nconst GetLoadedCommandsQuery = gql`\nquery GetLoadedCommandsQuery($callback_id: Int!) {\n  loadedcommands(where: {callback_id: {_eq: $callback_id}}) {\n    id\n    command {\n      cmd\n      help_cmd\n      description\n      id\n      needs_admin\n      payload_type_id\n      commandparameters {\n        id\n        type \n      }\n    }\n  }\n}\n`;\nexport const createTaskingMutation = gql`\nmutation createTasking($callback_id: Int!, $command: String!, $params: String!, $files: String) {\n  createTask(callback_id: $callback_id, command: $command, params: $params, files: $files) {\n    status\n    id\n    error\n  }\n}\n`;\nconst getTaskingQuery = gql`\nquery getTasking($callback_id: Int!){\n    task(where: {callback_id: {_eq: $callback_id}}, order_by: {id: asc}) {\n        comment\n        commentOperator{\n            username\n        }\n        completed\n        id\n        operator{\n            username\n        }\n        original_params\n        display_params\n        status\n        timestamp\n        command {\n          cmd\n          id\n        }\n        responses(order_by: {id: desc}) {\n          id\n        }\n        opsec_pre_blocked\n        opsec_pre_bypassed\n        opsec_post_blocked\n        opsec_post_bypassed\n  }\n}\n `;\nconst getTaskingSubscription = gql`\nsubscription getNewUpdatedTaskingSubscription($callback_id: Int!) {\n  task(where: {callback_id: {_eq: $callback_id}}, limit: 1, order_by: {timestamp: desc}) {\n        comment\n        commentOperator{\n            username\n        }\n        completed\n        id\n        operator{\n            username\n        }\n        original_params\n        display_params\n        status\n        timestamp\n        command {\n          cmd\n          id\n        }\n        responses(order_by: {id: desc}) {\n          id\n        }\n        opsec_pre_blocked\n        opsec_pre_bypassed\n        opsec_post_blocked\n        opsec_post_bypassed\n  }\n}\n `;\nconst escapeHTML = escapeHTMLDefinition;\nconst sort_table = sort_tableDefinition;\nvar browserscripts = {};\nvar support_scripts = {};\nexport const CallbacksTabsTaskingPanel = (props) =>{\n    const { enqueueSnackbar } = useSnackbar();\n    const me = useReactiveVar(meState);\n    const [commands, setCommands] = React.useState([]);\n    const [browserScripts, setBrowserScripts] = React.useState({});\n    const [supportScripts, setSupportScripts] = React.useState({});\n    const [openParametersDialog, setOpenParametersDialog] = React.useState(false);\n    const [commandInfo, setCommandInfo] = React.useState({});\n    const [getScripts, { loading: scriptLoading}] = useLazyQuery(scriptsQuery, {\n        onCompleted: data => {\n            console.log(data);\n            //consolidate the browserscriptoperation and browserscript \n            // operation scripts get applied instead of operator-specific scripts\n            \n            try{\n                eval(getSupportScripts(data));\n                eval(getBrowserScripts(data));\n            }catch(error){\n                console.error(error);\n            }\n            console.log(browserscripts);\n            setBrowserScripts(browserscripts);\n            console.log(support_scripts);\n            setSupportScripts(supportScripts);\n        },\n        onError: data => {\n            console.error(data)\n        }\n    });\n    const [createTask] = useMutation(createTaskingMutation, {\n        update: (cache, {data}) => {\n            if(data.createTask.status === \"error\"){\n                enqueueSnackbar(data.createTask.error, {variant: \"error\"});\n            }else{\n                enqueueSnackbar(\"task created\", {variant: \"success\"});\n            }\n        },\n        onError: data => {\n            console.error(data);\n        }\n    });\n    const {loading, error} = useQuery(GetLoadedCommandsQuery, {\n        variables: {callback_id: props.tabInfo.callbackID},\n        onCompleted: data => {\n            const cmds = data.loadedcommands.map( (cmd) => {\n                return cmd.command;\n            } );\n            cmds.sort((a, b) => -b.cmd.localeCompare(a.cmd))\n            setCommands(cmds);\n        },\n        onError: data => {\n            console.error(data)\n        }\n        });\n    const [getTasking, { loading: taskingLoading, data: taskingData, subscribeToMore: subscribeToMoreTasks }] = useLazyQuery(getTaskingQuery, {\n        onCompleted: data => {\n            subscribeToMoreTasks({\n            document: getTaskingSubscription,\n            variables: {callback_id: props.tabInfo.callbackID},\n            updateQuery: (prev, {subscriptionData} ) => {\n                //console.log(\"got subscription data\", subscriptionData);\n                if(!subscriptionData.data) return prev;\n                if(subscriptionData.data.task.length === 0) return prev;\n                const exists = prev.task.find(\n                  ({ id }) => id === subscriptionData.data.task[0].id\n                );\n                if (exists) return prev;\n                return Object.assign({}, prev, {\n                    task: [...prev.task, subscriptionData.data.task[0]]\n                });\n            },\n        })\n        },\n        onError: data => {\n            console.error(data)\n        }\n    });\n    const messagesEndRef = useRef(null);\n    const scrollToBottom = () => {\n        if(taskingData && messagesEndRef.current){\n            messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n      }\n    useEffect( () => {\n        getTasking({variables: {callback_id: props.tabInfo.callbackID} });\n    }, [getTasking, props.tabInfo.callbackID]);\n    \n    useEffect(scrollToBottom, [taskingData]);\n    useEffect( () => {getScripts({variables: {operator_id: me.user.id, operation_id: me.user.current_operation_id } }); }, []);\n    if (loading) {\n     return <LinearProgress style={{marginTop: \"10px\"}} />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    const onSubmitCommandLine = (message) => {\n        const command = message.split(\" \")[0];\n        const params = message.substring(command.length).trim();\n        if(command === \"clear\"){\n            onCreateTask({callback_id: props.tabInfo.callbackID, command: command, params: params});\n            return;\n        }\n        const commandParams = commands.find(com => com.cmd === command);\n        console.log(commandParams);\n        if(commandParams === undefined){\n            enqueueSnackbar(\"Unknown command\", {variant: \"warning\"});\n            return; \n        }else if(commandParams.commandparameters.length === 0){\n            // if there are no parameters, just send whatever the user types along\n            onCreateTask({callback_id: props.tabInfo.callbackID, command: command, params: params});\n        }else{\n            // check if there's a \"file\" component that needs to be displayed\n            const fileParamExists = commandParams.commandparameters.find(param => param.parameter_type === \"File\");\n            if(fileParamExists || params.length === 0){\n                //need to do a popup\n                setCommandInfo({...commandParams, \"typedParameters\": message});\n                setOpenParametersDialog(true);\n                return;\n            }else{\n                onCreateTask({callback_id: props.tabInfo.callbackID, command: command, params: params});\n            }            \n        }\n    }\n    const submitParametersDialog = (cmd, parameters, files) => {\n        setOpenParametersDialog(false);\n        onCreateTask({callback_id: props.tabInfo.callbackID, command: cmd, params: parameters, files: files});\n    }\n    const onCreateTask = ({callback_id, command, params, files}) => {\n        createTask({variables: {callback_id, command, params, files}});\n    }\n\n    \n    return (\n        <MythicTabPanel {...props} >\n            <div style={{maxHeight: `calc(${props.maxHeight - 6}vh)`, overflow: \"auto\", height: `calc(${props.maxHeight - 6}vh)`}}>\n            {\n             taskingLoading ? (<LinearProgress style={{marginTop: \"10px\"}}/>) : (taskingData &&\n                taskingData.task.map( (task) => (\n                    <TaskDisplay key={\"taskinteractdisplay\" + task.id} task={task} command_id={task.command.id} browserscripts={browserScripts}  />\n                ))\n             )\n             \n            }\n            <div ref={messagesEndRef} />\n            </div>\n            <MythicDialog fullWidth={true} maxWidth=\"md\" open={openParametersDialog} \n                    onClose={()=>{setOpenParametersDialog(false);}} \n                    innerDialog={<TaskParametersDialog command={commandInfo} callback={props.callback[0]} onSubmit={submitParametersDialog} onClose={()=>{setOpenParametersDialog(false);}} />}\n                />\n            <CallbacksTabsTaskingInput onSubmitCommandLine={onSubmitCommandLine} loadedOptions={commands} taskOptions={taskingData}/>\n        </MythicTabPanel>\n    )\n}\nCallbacksTabsTaskingPanel.whyDidYouRender = true;\n","/mythic/src/components/pages/Callbacks/TaskParametersDialog.js",["432","433","434","435","436","437"],"import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {TaskParametersDialogRow} from './TaskParametersDialogRow';\nimport {useQuery, gql, useLazyQuery, useMutation } from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\n//if we need to get all the loaded commands for the callback and filter, use this\nconst GetLoadedCommandsQuery = gql`\nquery GetLoadedCommandsQuery($callback_id: Int!) {\n  loadedcommands(where: {callback_id: {_eq: $callback_id}}) {\n    id\n    command {\n      cmd\n      attributes\n      id\n    }\n  }\n}\n`;\n//if we need to get all the possible commands for a payload type and filter, use this\nconst getAllCommandsQuery = gql`\nquery getAllCommandsQuery($payload_type_id: Int!){\n    command(where: {payload_type_id: {_eq: $payload_type_id}, deleted: {_eq: false}}) {\n        attributes\n        cmd\n        id\n    }\n}\n`;\n//if we need to get all the possible edges for the callback, use this\nconst getAllEdgesQuery = gql`\nquery getAllEdgesQuery($callback_id: Int!){\n    callbackgraphedge(where: {_or: [{source_id:{_eq: $callback_id}}, {destination_id: {_eq: $callback_id}}]}) {\n        id\n        c2profile {\n          id\n          name\n        }\n        direction\n        destination{\n            agent_callback_id\n            host\n            id\n            payload {\n              uuid\n            }\n            c2profileparametersinstances {\n              enc_key\n              dec_key\n              value\n              c2_profile_id\n              c2profileparameter {\n                crypto_type\n                name\n              }\n            }\n        }\n        source{\n            agent_callback_id\n            host\n            id\n            payload {\n              uuid\n            }\n            c2profileparametersinstances {\n              enc_key\n              dec_key\n              c2_profile_id\n              value\n              c2profileparameter {\n                crypto_type\n                name\n              }\n            }\n        }\n        end_timestamp\n      }\n    }\n`;\n// get all payloads query\nconst getAllPayloadsQuery = gql`\nquery getAllPayloadsQuery($operation_id: Int!){\n    payload(where: {deleted: {_eq: false}, build_phase: {_eq: \"success\"}, operation_id: {_eq: $operation_id}}) {\n    id\n    tag\n    uuid\n    payloadc2profiles {\n      c2profile {\n        name\n      }\n    }\n    payloadtype{\n        ptype\n    }\n    filemetum {\n        filename\n    }\n    buildparameterinstances {\n      parameter\n      buildparameter {\n        name\n      }\n    }\n  }\n}\n`;\n// get all payloads on hosts\nconst getAllPayloadsOnHostsQuery = gql`\nquery getAllPayloadsOnHostsQuery($operation_id: Int!){\n    payloadonhost(where: {deleted: {_eq: false}, operation_id: {_eq: $operation_id}, payload: {c2profileparametersinstances: {c2profile: {is_p2p: {_eq: true}}}}}) {\n    host\n    id\n    payload {\n      auto_generated\n      id\n      tag\n      filemetum {\n        filename\n      }\n      uuid\n      c2profileparametersinstances(where: {c2profile: {is_p2p: {_eq: true}}}) {\n        c2profile {\n          name\n        }\n        c2profileparameter {\n          crypto_type\n          name\n        }\n        value\n        enc_key\n        dec_key\n      }\n      callbacks(where: {active: {_eq: true}}) {\n        agent_callback_id\n        id\n        host\n        description\n        enc_key\n        dec_key\n        crypto_type\n      }\n    }\n  }\n}\n`;\n// use this to add a payload on a host\nconst addPayloadOnHostMutation = gql`\n    mutation addPayloadOnHostMutation($host: String!, $payload_id: Int!){\n        insert_payloadonhost(objects: {host: $host, payload_id: $payload_id}) {\n            affected_rows\n          }\n    }\n`;\n// use this to get all of the parameters and information for the command we're trying to execute\nconst getCommandQuery = gql`\nquery getCommandQuery($id: Int!){\n  command_by_pk(id: $id) {\n    attributes\n    author\n    cmd\n    description\n    help_cmd\n    id\n    needs_admin\n    version\n    payloadtype{\n        ptype\n    }\n    commandparameters {\n      choice_filter_by_command_attributes\n      choices\n      choices_are_all_commands\n      choices_are_loaded_commands\n      default_value\n      description\n      id\n      name\n      required\n      supported_agent_build_parameters\n      supported_agents\n      type\n    }\n    commandopsec {\n      authentication\n      id\n      injection_method\n      process_creation\n    }\n  }\n}\n`;\nexport function TaskParametersDialog(props) {\n    const [parameters, setParameters] = useState([]);\n    const [rawParameters, setRawParameters] = useState(false);\n    const [requiredPieces, setRequiredPieces] = useState({all: false, loaded: false, edges: false});\n    //get all the data about our command that we can\n    const [getAllCommands, { data: allCommandsLoading}] = useLazyQuery(getAllCommandsQuery, {\n        fetchPolicy: \"cache-and-network\"\n    });\n    const [getLoadedCommands, { data: loadedCommandsLoading}] = useLazyQuery(GetLoadedCommandsQuery, {\n        fetchPolicy: \"cache-and-network\"\n    });\n    const [getAllEdges, { data: loadedAllEdgesLoading}] = useLazyQuery(getAllEdgesQuery, {\n        fetchPolicy: \"cache-and-network\"\n    });\n    const [getAllPayloads, { data: loadedAllPayloadsLoading}] = useLazyQuery(getAllPayloadsQuery, {\n        fetchPolicy: \"cache-and-network\"\n    });\n    const [getAllPayloadsOnHosts, { data: loadedAllPayloadsOnHostsLoading}] = useLazyQuery(getAllPayloadsOnHostsQuery, {\n        fetchPolicy: \"cache-and-network\"\n    });\n    const [addPayloadOnHost] = useMutation(addPayloadOnHostMutation, {\n        onCompleted: data => {\n            console.log(data);\n            getAllPayloadsOnHosts({variables: {operation_id: props.callback.operation_id}})\n        }\n    });\n    const {loading, error, data: cmdInfo} = useQuery(getCommandQuery, {\n        variables: {id: props.command.id},\n        onCompleted: data => {\n            // do an initial pass to see what other quries we need to make\n            let requiredPiecesInitial = {all: false, loaded: false, edges: false};\n            data.command_by_pk.commandparameters.forEach( (cmd) => {\n                if(cmd.type === \"LinkInfo\"){\n                    requiredPiecesInitial[\"edges\"] = true;\n                }else if(cmd.choices_are_all_commands){\n                    requiredPiecesInitial[\"all\"] = true;\n                }else if(cmd.choices_are_loaded_commands){\n                    requiredPiecesInitial[\"loaded\"] = true;\n                }else if(cmd.type === \"AgentConnect\"){\n                    requiredPiecesInitial[\"connect\"] = true;\n                    //need payloads as well in case the user wants to add a payload to a host\n                    requiredPiecesInitial[\"payloads\"] = true;\n                }else if(cmd.type === \"PayloadList\"){\n                    requiredPiecesInitial[\"payloads\"] = true;\n                }\n            });\n            if(requiredPiecesInitial[\"edges\"]){getAllEdges({variables: {callback_id: props.callback.id} });}\n            if(requiredPiecesInitial[\"all\"]){getAllCommands({variables: {payload_type_id: props.callback.payload.payloadtype.id}});}\n            if(requiredPiecesInitial[\"loaded\"]){getLoadedCommands({variables: {callback_id: props.callback.id} });}\n            if(requiredPiecesInitial[\"payloads\"]){getAllPayloads({variables: {operation_id: props.callback.operation_id} });}\n            if(requiredPiecesInitial[\"connect\"]){getAllPayloadsOnHosts({variables: {operation_id: props.callback.operation_id} });}\n            setRequiredPieces(requiredPiecesInitial);\n            setRawParameters({...data});\n        }\n    });\n    const intersect = (a, b) => {\n      let setB = new Set(b);\n      return [...new Set(a)].filter(x => setB.has(x));\n    }\n    const getLinkInfoFromAgentConnect = (choices) => {\n        const c2profileparameters = choices[0][\"payloads\"][0][\"c2info\"][0].parameters.map( (opt) => {\n            return { [opt.name]: opt.value}\n        });\n        let agentConnectValue = {host: choices[0][\"host\"], agent_uuid: choices[0][\"payloads\"][0].uuid,\n        c2_profile: {name: choices[0][\"payloads\"][0][\"c2info\"][0].name, parameters: c2profileparameters}};\n        if(choices[0][\"payloads\"][0].type === \"callback\"){\n            agentConnectValue[\"callback_uuid\"] = props.choices[0][\"payloads\"][0][\"agent_callback_id\"];\n        }\n        return agentConnectValue;\n    }\n    const getLinkInfoValue = (choices) => {\n        let choice;\n        if(choices[0][\"source\"][\"id\"] === props.callback_id){\n            choice = choices[0][\"source\"];\n        }else{\n            choice = choices[0][\"destination\"];\n        }\n        const c2profileparameters = choice[\"c2profileparametersinstances\"].reduce( (prev, opt) => {\n            if(opt.c2_profile_id === choices[0][\"c2profile\"][\"id\"]){\n                return [...prev, { [opt.c2profileparameter.name]: !opt.c2profileparameter.crypto_type ? opt.value : {crypto_type: opt.c2profileparameter.crypto_type, enc_key: opt.enc_key, dec_key: opt.dec_key} } ]\n            }else{\n                return prev;\n            }\n        }, []);\n        let agentConnectValue = {host: choice.host, agent_uuid: choice.payload.uuid, callback_uuid: choice.agent_callback_id, c2_profile: {name: choices[0][\"c2profile\"][\"name\"], parameters: c2profileparameters} };\n        return agentConnectValue;\n    }\n    useEffect( () => {\n        if(rawParameters && (!requiredPieces[\"loaded\"] || loadedCommandsLoading) &&\n                       (!requiredPieces[\"all\"] || allCommandsLoading) &&\n                       (!requiredPieces[\"edges\"] || loadedAllEdgesLoading) &&\n                       (!requiredPieces[\"payloads\"] || loadedAllPayloadsLoading) && \n                       (!requiredPieces[\"connect\"] || loadedAllPayloadsOnHostsLoading) ){\n            //only process the parameter once we have fetched all of the required pieces\n            const params = rawParameters.command_by_pk.commandparameters.map( (cmd) => {\n                switch(cmd.type){\n                    case \"Boolean\":\n                        console.log(cmd);\n                        if(cmd.default_value){\n                            return {...cmd, value: cmd.default_value.toLowerCase() === \"true\"}\n                        }else{\n                            return {...cmd, value: false}\n                        }\n                    case \"String\":\n                    case \"Number\":\n                        return {...cmd, value: cmd.default_value};\n                    case \"Array\":\n                        if(cmd.default_value.length > 0){\n                            return {...cmd, value: JSON.parse(cmd.default_value)};\n                        }else{\n                            return {...cmd, value: []};\n                        }\n                    case \"Choice\":\n                    case \"ChoiceMultiple\":\n                        let choices = cmd.choices.split(\"\\n\");\n                        let defaultV = cmd.default_value;\n                        if(cmd.type === \"ChoiceMultiple\"){\n                            if(cmd.default_value !== \"\"){\n                                defaultV = JSON.parse(cmd.default_value);\n                            }else{\n                                defaultV = [];\n                            }\n                        }\n                        let filter = JSON.parse(cmd.choice_filter_by_command_attributes);\n                        if(cmd.choices_are_all_commands){\n                            //get all of the latest commands\n                            choices = [...allCommandsLoading.command];\n                            choices = choices.reduce( (prev, c) => {\n                                let match = true;\n                                let cmd_attributes = JSON.parse(c.attributes);\n                                for(const [key, value] of Object.entries(filter)){\n                                    if(key === \"spawn_and_injectable\"){\n                                        if(value !== cmd_attributes[key]){\n                                            match = false;\n                                        }\n                                    }else if(key === \"supported_os\" && value.length > 0){\n                                        if(intersect(value, cmd_attributes[key]).length === 0){\n                                            match = false;\n                                        }\n                                    }\n                                }\n                                if(match){\n                                    return [...prev, c.cmd];\n                                }else{\n                                    return prev;\n                                }\n                            }, []);\n                            if(choices.length > 0){\n                                if(cmd.type === \"ChoiceMultiple\"){defaultV = []}\n                                else{defaultV = choices[0];}\n                            }\n                        }else if(cmd.choices_are_loaded_commands){\n                            //get all of the loaded commands\n                            choices = [...loadedCommandsLoading.loadedcommands];\n                            choices = choices.reduce( (prev, c) => {\n                                let match = true;\n                                let cmd_attributes = JSON.parse(c.command.attributes);\n                                for(const [key, value] of Object.entries(filter)){\n                                    if(key === \"spawn_and_injectable\"){\n                                        if(value !== cmd_attributes[key]){\n                                            match = false;\n                                        }\n                                    }else if(key === \"supported_os\" && value.length > 0){\n                                        if(intersect(value, cmd_attributes[key]).length === 0){\n                                            match = false;\n                                        }\n                                    }\n                                }\n                                if(match){\n                                    return [...prev, c.command.cmd];\n                                }else{\n                                    return prev;\n                                }\n                            }, []);\n                            if(choices.length > 0){\n                                if(cmd.type === \"ChoiceMultiple\"){defaultV = []}\n                                else{defaultV = choices[0];}\n                            }\n                        }\n                        \n                        return {...cmd, choices: choices, default_value: defaultV, value: defaultV}\n                    \n                    case \"File\":\n                        return {...cmd, value: {} }\n                    /*\n                    case \"Credential-JSON\":\n                    case \"Credential-Account\":\n                    case \"Credential-Realm\":\n                    case \"Credential-Type\":\n                    case \"Credential-Credential\":\n                    */\n                    case \"AgentConnect\":\n                    //want to make a format of [ {host: \"hostname\", payloads: [ {uuid: \"uuid\" } ], callbacks: [ { agent_callback_id: \"uuid\" } ] } ]\n                        const agentConnectNewPayloads = loadedAllPayloadsLoading.payload.reduce( (prev, payload) => {\n                            const profiles = payload.payloadc2profiles.reduce( (prev, profile) => {\n                                return [...prev, profile.c2profile.name];\n                            }, []).join(\",\");\n                            return [...prev, {...payload, display: payload.filemetum.filename + \" - \" + profiles + \" - \" + payload.tag}]\n                        }, []);\n                        const organized = loadedAllPayloadsOnHostsLoading.payloadonhost.reduce( (prev, entry) => {\n                            let found = false;\n                            const updates = prev.map( (host) => {\n                                if(host.host === entry.host){\n                                    found = true;\n                                    //now we need to merge this entry with our current payloads/callbacks for the host\n                                    let duplicated_payload = false;\n                                    host.payloads.forEach( (p) => {\n                                        if(p.id === entry.payload.id){duplicated_payload = true}\n                                    });\n                                    if(duplicated_payload){return host}\n                                    const c2info = entry.payload.c2profileparametersinstances.reduce( (prev, cur) => {\n                                    const val = !cur.c2profileparameter.crypto_type ? cur.value : {crypto_type: cur.c2profileparameter.crypto_type, enc_key: cur.enc_key, dec_key: cur.dec_key};\n                                        if(cur.c2profile.name in prev){\n                                            //we just want to add a new entry to the c2profile.name list\n                                            \n                                            return {...prev, [cur.c2profile.name]: [...prev[cur.c2profile.name], { name: cur.c2profileparameter.name, value:  val } ] }\n                                    }else{\n                                        return {...prev, [cur.c2profile.name]: [ { name: cur.c2profileparameter.name, value: val } ] }\n                                        }\n                                    }, {});\n                                    let c2array = [];\n                                    for( const [key, value] of Object.entries(c2info)){\n                                        c2array.push({name: key, parameters: value});\n                                    }\n                                    const payloadInfo = {...entry.payload, c2info: c2array, display: entry.payload.filemetum.filename + \" - \" + entry.payload.tag, type: \"payload\"};\n                                    const callbacks = entry.payload.callbacks.reduce( (prior, callback) => {\n                                        if(callback.host === entry.host){\n                                            return [...prior, {...entry.payload, c2info: c2array, c2profileparametersinstances: entry.payload.c2profileparametersinstances,  display: \"Callback \" + callback.id + \" - \" + callback.description, ...callback, type: \"callback\"}];\n                                        }else{\n                                            return prior;\n                                        }\n                                    }, []);\n                                    return {...host, payloads: [...host.payloads, payloadInfo, ...callbacks]}\n                                }else{\n                                    //this doesn't match our host, so don't modify\n                                    return host; \n                                }\n                            });\n                            if(!found){\n                                const c2info = entry.payload.c2profileparametersinstances.reduce( (prev, cur) => {\n                                    const val = !cur.c2profileparameter.crypto_type ? cur.value : {crypto_type: cur.c2profileparameter.crypto_type, enc_key: cur.enc_key, dec_key: cur.dec_key};\n                                    if(cur.c2profile.name in prev){\n                                        //we just want to add a new entry to the c2profile.name list\n                                        \n                                        return {...prev, [cur.c2profile.name]: [...prev[cur.c2profile.name], { name: cur.c2profileparameter.name, value:  val } ] }\n                                    }else{\n                                        return {...prev, [cur.c2profile.name]: [ { name: cur.c2profileparameter.name, value: val } ] }\n                                    }\n                                }, {});\n                                let c2array = [];\n                                for( const [key, value] of Object.entries(c2info)){\n                                    c2array.push({name: key, parameters: value});\n                                }\n                                const payloadInfo = {...entry.payload, c2info: c2array, display: entry.payload.filemetum.filename + \" - \" + entry.payload.tag, type: \"payload\"};\n                                const callbacks = entry.payload.callbacks.reduce( (prior, callback) => {\n                                    if(callback.host === entry.host){\n                                        return [...prior, {...entry.payload, c2info: c2array, c2profileparametersinstances: entry.payload.c2profileparametersinstances,  display: \"Callback \" + callback.id + \" - \" + callback.description, ...callback, type: \"callback\"}];\n                                    }else{\n                                        return prior;\n                                    }\n                                }, []);\n                                return [...prev, {host: entry.host, payloads: [payloadInfo, ...callbacks] } ]\n                            }else{\n                                return updates;\n                            }\n                        }, []);\n                        return {...cmd, choices: organized, payload_choices: agentConnectNewPayloads, value: getLinkInfoFromAgentConnect(organized)}\n                    case \"PayloadList\":\n                        let supported_agents = cmd.supported_agents.split(\",\");\n                        if(supported_agents.indexOf(\"\") !== -1){supported_agents.splice(supported_agents.indexOf(\"\"))}\n                        const build_requirements = JSON.parse(cmd.supported_agent_build_parameters);\n                        const payloads = loadedAllPayloadsLoading.payload.reduce( (prev, payload) => {\n                            const profiles = payload.payloadc2profiles.reduce( (prev, profile) => {\n                                return [...prev, profile.c2profile.name];\n                            }, []).join(\",\");\n                            if(supported_agents.length > 0 && !supported_agents.includes(payload.payloadtype.ptype)){return prev};\n                            let matched = true;\n                            if(payload.payloadtype.ptype in build_requirements){\n                                //this means we have a filtering condition on our payload\n                                for(const [key, value] of Object.entries(build_requirements[payload.payloadtype.ptype])){\n                                    payload.buildparameterinstances.forEach( (build_param) => {\n                                        if(build_param.buildparameter.name === key){\n                                            if(build_param.parameter !== value){matched = false}\n                                        }\n                                    });\n                                }\n                            }\n                            if(matched){\n                                return [...prev, {...payload, display: payload.filemetum.filename + \" - \" + profiles + \" - \" + payload.tag}]\n                            }else{\n                                return prev;\n                            }\n                            \n                        }, []);\n                        //now filter the payloads based on supported_agents and supported_agent_build_parameters\n                        if(payloads.length > 0){\n                            return {...cmd, choices: payloads, default_value: payloads[0].uuid, value: payloads[0].uuid}\n                        }else{\n                            return {...cmd, choices: payloads, value: null}\n                        }\n                    case \"LinkInfo\":\n                        const edge_choices = loadedAllEdgesLoading.callbackgraphedge.reduce( (prev, edge) => {\n                            if(edge.source.id === edge.destination.id) {return prev}\n                            if(edge.direction === 1){\n                                return [...prev, {...edge, display: \"Callback \" + edge.source.id + \" --\" + edge.c2profile.name + \"--> Callback \" + edge.destination.id + (edge.end_timestamp === null? \"(Active)\" : \"(Dead at \" + edge.end_timestamp + \")\")}];\n                            }else if(edge.direction === 2){\n                                return [...prev, {...edge, display: \"Callback \" + edge.destination.id + \"-> \" + edge.c2profile.name + \"--> Callback \" + edge.source.id + (edge.end_timestamp === null? \"(Active)\" : \"(Dead at \" + edge.end_timestamp + \")\")}];\n                            } else{\n                                return prev;\n                            }\n                        }, []);\n                        if(edge_choices.length > 0){\n                            return {...cmd, choices: edge_choices, value: getLinkInfoValue(edge_choices)};\n                        }else{\n                            return {...cmd, choices: edge_choices, value: {}};\n                        }\n                    default:\n                        return {...cmd}\n                }\n            } );\n            const sorted = params.sort((a, b) => (a.name > b.name) ? 1 : -1)\n            setParameters(sorted);\n        }\n    }, [rawParameters, loadedCommandsLoading, allCommandsLoading, loadedAllEdgesLoading, requiredPieces, loadedAllPayloadsLoading, loadedAllPayloadsOnHostsLoading]);\n    const onSubmit = () => {\n        const collapsedParameters = parameters.reduce( (prev, param) => {\n            switch(param.type){\n                case \"String\":\n                case \"Boolean\":\n                case \"Number\":\n                case \"Choice\":\n                case \"ChoiceMultiple\":\n                case \"AgentConnect\":\n                case \"PayloadList\":\n                case \"LinkInfo\":\n                    return {...prev, [param.name]: param.value}\n                case \"File\":\n                    return {...prev, [param.name]: param.value.name}\n                default:\n                    return {...prev}\n            }\n        }, {});\n        const collapsedFiles = parameters.reduce( (prev, param) => {\n            if(param.type === \"File\"){\n                return {...prev, [param.name]: param.value.contents}\n            }else{\n                return {...prev}\n            }\n        }, {});\n        props.onSubmit(props.command.cmd, JSON.stringify(collapsedParameters), JSON.stringify(collapsedFiles));\n    }\n    const onAgentConnectAddNewPayloadOnHost = (host, payload) => {\n        addPayloadOnHost({variables: {host: host, payload_id: payload} })\n    }\n    const onChange = (name, value, error) => {\n        \n        const params = parameters.map( (param) => {\n            if(param.name === name){\n                return {...param, value: value};\n            }else{\n                return {...param};\n            }\n        });\n        setParameters(params);\n    }\n    \n  return (\n    <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">{props.command.cmd}'s Parameters</DialogTitle>\n        <DialogContent dividers={true}>\n            <Typography component=\"div\">\n                <b>Help</b> <pre style={{margin:0}}>{props.command.help_cmd}</pre>\n                <b>Description</b> <pre style={{margin:0}}>{props.command.description}</pre>\n                <b>Requires Admin?</b> {props.command.needs_admin ? \"True\": \"False\"}\n            </Typography>\n            <TableContainer component={Paper} className=\"mythicElement\"> \n                <Table size=\"small\" style={{\"tableLayout\": \"fixed\", \"maxWidth\": \"100%\", \"overflow\": \"scroll\"}}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell style={{width: \"30%\"}}>Parameter</TableCell>\n                            <TableCell>Value</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {parameters.map( (op) => (\n                            <TaskParametersDialogRow key={\"taskparameterrow\" + op.id} onChange={onChange} {...op} callback_id={props.callback.id} onAgentConnectAddNewPayloadOnHost={onAgentConnectAddNewPayloadOnHost}/>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={onSubmit} color=\"secondary\">\n            Submit\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/pages/Callbacks/ManuallyAddEdgeDialog.js",["438","439","440","441"],"import React, {useRef, useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport {muiTheme} from '../../../themes/Themes.js';\nimport {useQuery, useReactiveVar, gql } from '@apollo/client';\nimport { meState } from '../../../cache';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst getP2PProfilesAndCallbacks = gql`\nquery getP2PProfilesAndCallbacks($operation_id: Int!){\n  c2profile(where: {is_p2p: {_eq: true}}) {\n    callbackc2profiles(where: {callback: {operation_id: {_eq: $operation_id}}}) {\n      id\n      callback {\n        id\n        description\n      }\n    }\n    name\n    id\n  }\n}\n`;\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\nexport function ManuallyAddEdgeDialog(props) {\n    const classes = useStyles();\n    const [callbackOptions, setCallbackOptions] = React.useState([]);\n    const [profileOptions, setProfileOptions] = React.useState([]);\n    const [selectedDestination, setSelectedDestination] = React.useState('');\n    const [selectedProfile, setSelectedProfile] = React.useState('');\n    const inputRefDestination = useRef(null); \n    const inputRefProfile = useRef(null); \n      const handleChangeProfile = (event) => {\n        setSelectedProfile(event.target.value);\n      };\n      const handleChangeDestination = (event) => {\n        setSelectedDestination(event.target.value);\n      };\n    const handleSubmit = () => {\n        props.onSubmit(props.source.id, selectedProfile, selectedDestination.callback);\n        props.onClose();\n    }\n    const me = useReactiveVar(meState);\n    const { loading, error } = useQuery(getP2PProfilesAndCallbacks, {\n        variables: {operation_id: me.user.current_operation_id},\n        onCompleted: data => {\n            const filteredProfileOptions = data.c2profile.filter( (profile) => {\n                let found = false;\n                props.source.callbackc2profiles.forEach( (source_profile) => {\n                    if(source_profile.c2profile.name === profile.name){found = true};\n                });\n                return found;\n            } );\n            setProfileOptions(filteredProfileOptions);\n            if(filteredProfileOptions.length > 0){\n                setSelectedProfile(filteredProfileOptions[0]);\n                const cbopts = filteredProfileOptions[0][\"callbackc2profiles\"].filter( (cb) => cb.callback.id !== props.source.id );\n                setCallbackOptions(cbopts);\n                if(cbopts.length > 0){\n                    setSelectedDestination(cbopts[0]);\n                }\n            }\n        },\n        fetchPolicy: \"network-only\"\n    });\n    if (loading) {\n     return <LinearProgress style={{marginTop: \"10px\"}} />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n  return (\n    <React.Fragment>\n        <DialogTitle >Manually Add Edge From Callback {props.source.id}</DialogTitle>\n        <DialogContent dividers={true}>\n            <React.Fragment>\n                Manually add an edge from Callback {props.source.id} to another callback via a P2P C2 Profile they both share.<br/>\n                <FormControl className={classes.formControl}>\n                  <InputLabel id=\"demo-dialog-select-label-profile\">Profile</InputLabel>\n                  <Select\n                    labelId=\"demo-dialog-select-label-profile\"\n                    id=\"demo-dialog-select\"\n                    displayEmpty\n                    value={selectedProfile}\n                    onChange={handleChangeProfile}\n                    style={{minWidth: \"30%\"}}\n                  >\n                    <MenuItem value=\"\">\n                      <em>None</em>\n                    </MenuItem>\n                    {profileOptions.map( (opt) => (\n                        <MenuItem value={opt} key={\"profile:\" + opt.id}>{opt.name}</MenuItem>\n                    ) )}\n                  </Select>\n                </FormControl><br/>\n                <FormControl className={classes.formControl}>\n                  <InputLabel ref={inputRefDestination}>Destination</InputLabel>\n                  <Select\n                    labelId=\"demo-dialog-select-label-destination\"\n                    id=\"demo-dialog-select-destination\"\n                    value={selectedDestination}\n                    displayEmpty\n                    onChange={handleChangeDestination}\n                    input={<Input />}\n                  >\n                    <MenuItem value=\"\">\n                      <em>None</em>\n                    </MenuItem>\n                    {callbackOptions.map( (opt) => (\n                        <MenuItem value={opt} key={\"callback:\" + opt.callback.id}>{opt.callback.id} ({opt.callback.description})</MenuItem>\n                    ) )}\n                  </Select>\n                </FormControl>\n            </React.Fragment>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={handleSubmit} style={{color: muiTheme.palette.success.main}}>\n            Add\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/MythicComponents/MythicSelectFromListDialog.js",["442","443"],"import React, {useRef, useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport {muiTheme} from '../../themes/Themes.js';\n\nexport function MythicSelectFromListDialog(props) {\n    const [options, setOptions] = React.useState([]);\n    const [selected, setSelected] = React.useState(null);\n    const inputRef = useRef(null); \n    const handleChange = (event) => {\n        setSelected(event.target.value);\n      };\n    const handleSubmit = () => {\n        props.onSubmit(selected);\n        props.onClose();\n    }\n    useEffect( () => {\n        //expects options to be an array of dictionaries with a \"display\" field for what gets presented to the user\n        const opts = [...props.options];\n        setOptions(opts);\n        if(opts.length > 0){\n            setSelected(opts[0]);\n        }else{\n            setSelected(\"\");\n        }\n    }, []);\n  return (\n    <React.Fragment>\n        <DialogTitle >{props.title}</DialogTitle>\n        <DialogContent dividers={true}>\n            <React.Fragment>\n                <FormControl>\n                  <InputLabel ref={inputRef}>Edge</InputLabel>\n                  <Select\n                    labelId=\"demo-dialog-select-label\"\n                    id=\"demo-dialog-select\"\n                    value={selected}\n                    onChange={handleChange}\n                    input={<Input />}\n                  >\n                    <MenuItem value=\"\">\n                      <em>None</em>\n                    </MenuItem>\n                    {options.map( (opt) => (\n                        <MenuItem value={opt} key={opt.display}>{opt.display}</MenuItem>\n                    ) )}\n                  </Select>\n                </FormControl>\n            </React.Fragment>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={handleSubmit} style={{color: muiTheme.palette.warning.main}}>\n            {props.action}\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/pages/Callbacks/CallbackMutations.js",[],"/mythic/src/components/MythicComponents/MythicTable.js",[],"/mythic/src/components/pages/Callbacks/CallbacksTableRow.js",["444","445","446"],"import React, {useEffect} from 'react';\nimport {Button} from '@material-ui/core';\nimport TableCell from '@material-ui/core/TableCell';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport { MythicDisplayTextDialog} from '../../MythicComponents/MythicDisplayTextDialog';\nimport {EnhancedTableRow} from '../../MythicComponents/MythicTable';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport KeyboardIcon from '@material-ui/icons/Keyboard';\nimport LockIcon from '@material-ui/icons/Lock';\nimport {getTimeDifference, useInterval } from '../../utilities/Time';\nimport WifiIcon from '@material-ui/icons/Wifi';\nimport InsertLinkTwoToneIcon from '@material-ui/icons/InsertLinkTwoTone';\nimport {C2PathDialog} from './C2PathDialog';\nimport {muiTheme} from \"../../../themes/Themes\";\nimport { useSnackbar } from 'notistack';\nimport Paper from '@material-ui/core/Paper';\nimport Grow from '@material-ui/core/Grow';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport {hideCallbackMutation} from './CallbackMutations';\nimport {useMutation } from '@apollo/client';\nimport SnoozeIcon from '@material-ui/icons/Snooze';\n\n\nexport function CallbacksTableRow(props){\n    const dropdownAnchorRef = React.useRef(null);\n    const { enqueueSnackbar } = useSnackbar();\n    const [displayTime, setDisplayTime] = React.useState(\"\");\n    const [activeEgress, setActiveEgress] = React.useState(muiTheme.palette.success.main);\n    const [activeEgressBool, setActiveEgressBool] = React.useState(true);\n    const [dropdownOpen, setDropdownOpen] = React.useState(false);\n    const [openC2Dialog, setOpenC2Dialog] = React.useState(false);\n    const [openSleepDialog, setOpenSleepDialog] = React.useState(false);\n    const [callbackgraphedges, setCallbackgraphedges] = React.useState([]);\n    const [callbackgraphedgesAll, setCallbackgraphedgesAll] = React.useState([]);\n    const handleDropdownToggle = (evt) => {\n            evt.stopPropagation();\n            setDropdownOpen((prevOpen) => !prevOpen);\n      };\n      const handleDropdownClose = (event) => {\n        if (dropdownAnchorRef.current && dropdownAnchorRef.current.contains(event.target)) {\n          return;\n        }\n        setDropdownOpen(false);\n      };\n    const updateTime = (curTime) => {\n        setDisplayTime(getTimeDifference(curTime));\n    };\n    useInterval( () => {\n        updateTime(props.last_checkin);\n    });\n    const onOpenTab = (tabType) => {\n        if(!activeEgressBool){\n            enqueueSnackbar(\"Agent has no egress route! Re-link before tasking\", {variant: \"warning\"});\n        }\n        props.onOpenTab({tabType, tabID: props.id + tabType, callbackID: props.id});\n    }\n    const hasOwnEgressRoute = () =>{\n    // just check if our own callback has an egress connection or only p2p connections\n        return callbackgraphedgesAll.filter( (edge) => {\n            if(!edge.c2profile.is_p2p && edge.source.id === props.id && edge.destination.id === props.id){\n                return true;\n            }\n            return false;\n        }).length > 0;\n    }\n    const getEdges = (activeOnly) => {\n        //update our aggregate of callbackgraphedges for both src and dst that involve us\n        let myEdges = props.callbackgraphedges.filter( (edge) =>{\n            if(edge.source.id === props.id || edge.destination.id === props.id){\n                if(activeOnly){\n                    if(edge.end_timestamp === null){\n                        return true;\n                    }\n                    else{return false}\n                }\n                return true;\n            }\n            return false;\n        });\n        let foundMore = true;\n        while(foundMore){\n            //look at all of the edges in myEdges and see if there are any edges that share a source/destination in props.callbackgraphedges that are _not_ in myEdges so far\n            const newEdges = props.callbackgraphedges.reduce( (prev, edge) => {\n                //looking to see if we should add 'edge' to our list of relevant edges\n                if(prev.includes(edge)){return [...prev]}\n                //look through all of the previous edges we know about and see if there's a matching source/destination id with the new edge\n                const matching = prev.filter( (e) => {\n                    if(e.source.id === edge.source.id || e.source.id === edge.destination.id || e.destination.id === edge.source.id ){\n                        if(activeOnly){\n                            if(edge.end_timestamp === null) { return true}\n                            else{return false}\n                        }\n                        return true;\n                    }\n                    return false;\n                });\n                if(matching.length > 0){\n                    return [...prev, edge];\n                }else{\n                    return [...prev];\n                }\n            }, [...myEdges]);\n            foundMore = newEdges.length > myEdges;\n            myEdges = [...newEdges];\n        }\n        return myEdges;\n    }\n    useEffect( () => {\n        const myActiveEdges = getEdges(true);\n        const myEdges = getEdges(false);\n        setCallbackgraphedges(myActiveEdges);\n        setCallbackgraphedgesAll(myEdges);\n    }, [props.callbackgraphedges]);\n    \n    useEffect( () => {\n        //determine if there are any active routes left at all\n        const activeRoutes = callbackgraphedges.filter( (edge) => {\n            if(!edge.c2profile.is_p2p  && edge.end_timestamp === null){\n                return edge;\n            }\n        });\n        if(activeRoutes.length === 0){\n            setActiveEgress(muiTheme.palette.error.main);\n            setActiveEgressBool(false);\n        }else{\n            setActiveEgress(muiTheme.palette.success.main);\n            setActiveEgressBool(true);\n        }\n    }, [callbackgraphedges]);\n    const handleMenuItemClick = (event, index) => {\n        options[index].click(event);\n        setDropdownOpen(false);\n    };\n    const handleClose = (event) => {\n        if (dropdownAnchorRef.current && dropdownAnchorRef.current.contains(event.target)) {\n          return;\n        }\n\n        setDropdownOpen(false);\n      };\n      const [hideCallback] = useMutation(hideCallbackMutation, {\n        update: (cache, {data}) => {\n            if(data.updateCallback.status === \"success\"){\n                enqueueSnackbar(\"Hiding Callback.\", {variant: \"success\", autoHideDuration: 2000});\n            }else{\n                enqueueSnackbar(data.updateCallback.error, {variant: \"warning\"});\n            }\n            \n        },\n        onError: data => {\n            console.log(data);\n        }\n    });\n    const options = [{name: 'Hide Callback', icon: <VisibilityOffIcon style={{paddingRight: \"5px\"}}/>, click: (evt) => {\n                        evt.stopPropagation();\n                        hideCallback({variables: {callback_id: props.id}});\n                     }},\n                 ];\n    return (\n    <React.Fragment>\n        <EnhancedTableRow id={props.id} handleClick={props.handleClick} isItemSelected={props.isItemSelected(props.id)}> \n            <TableCell>\n                <ButtonGroup variant=\"contained\" color={props.integrity_level > 2 ? \"secondary\" : \"primary\"} ref={dropdownAnchorRef} aria-label=\"split button\">\n                <Button size=\"small\" onClick={(evt) => {evt.stopPropagation();onOpenTab(\"interact\")}}>\n                 { props.locked ? (<LockIcon />):(<KeyboardIcon />) } {props.id}\n                 </Button>\n                 <Button\n                    style={{padding:0}} \n                    size=\"small\"\n                    aria-controls={dropdownOpen ? 'split-button-menu' : undefined}\n                    aria-expanded={dropdownOpen ? 'true' : undefined}\n                    aria-haspopup=\"menu\"\n                    onClick={handleDropdownToggle}\n                  >\n                    <ArrowDropDownIcon />\n                  </Button>\n                </ButtonGroup>\n                <Popper open={dropdownOpen} anchorEl={dropdownAnchorRef.current} role={undefined} transition disablePortal>\n                  {({ TransitionProps, placement }) => (\n                    <Grow\n                      {...TransitionProps}\n                      style={{\n                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                      }}\n                    >\n                      <Paper>\n                        <ClickAwayListener onClickAway={handleClose}>\n                          <MenuList id=\"split-button-menu\">\n                            {options.map((option, index) => (\n                              <MenuItem\n                                key={option.name}\n                                onClick={(event) => handleMenuItemClick(event, index)}\n                              >\n                                {option.icon}{option.name}\n                              </MenuItem>\n                            ))}\n                          </MenuList>\n                        </ClickAwayListener>\n                      </Paper>\n                    </Grow>\n                  )}\n                </Popper>\n            </TableCell>\n            <TableCell>{props.ip}</TableCell>\n            <TableCell>{props.host}</TableCell>\n            <TableCell>{props.user}</TableCell>\n            <TableCell>{props.domain}</TableCell>\n            <TableCell>{props.os}({props.architecture})</TableCell>\n            <TableCell>{props.pid}</TableCell>\n            <TableCell>{displayTime}</TableCell>\n            <TableCell>{props.description}</TableCell>\n            <TableCell><SnoozeIcon onClick={(evt)=>{evt.stopPropagation();setOpenSleepDialog(true);}} style={{color: props.sleep_info === \"\" ? muiTheme.palette.warning.main : muiTheme.palette.info.main}}/></TableCell>\n            <TableCell>{props.payload.payloadtype.ptype}</TableCell>\n            <TableCell>{hasOwnEgressRoute() ? \n                <WifiIcon onClick={(evt)=>{evt.stopPropagation();setOpenC2Dialog(true);}} style={{color: activeEgress}}/> : \n                <InsertLinkTwoToneIcon onClick={(evt)=>{evt.stopPropagation();setOpenC2Dialog(true);}} style={{color: activeEgress}} />\n                }\n            </TableCell>\n        </EnhancedTableRow>\n        <MythicDialog fullWidth={true} maxWidth=\"lg\" open={openC2Dialog}\n                    onClose={()=>{setOpenC2Dialog(false);}} \n                    innerDialog={<C2PathDialog onClose={()=>{setOpenC2Dialog(false);}} {...props} callbackgraphedges={activeEgressBool ? callbackgraphedges : callbackgraphedgesAll} />}\n                />\n        <MythicDisplayTextDialog onClose={()=>{setOpenSleepDialog(false);}} title={\"Sleep Information\"} maxWidth={\"md\"} fullWidth={true} value={props.sleep_info} open={openSleepDialog}/>\n    </React.Fragment>\n    )\n}\n\n","/mythic/src/components/utilities/BrowserScriptHelpers.js",[],"/mythic/src/components/pages/Callbacks/CallbacksTabsTaskingInput.js",[],"/mythic/src/components/pages/Callbacks/TaskDisplay.js",["447","448","449","450","451","452","453","454"],"import React, {useEffect, useRef} from 'react';\nimport {Button, IconButton} from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { toLocalTime } from '../../utilities/Time';\nimport { copyStringToClipboard } from '../../utilities/Clipboard';\nimport { meState } from '../../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport LinkIcon from '@material-ui/icons/Link';\nimport CodeIcon from '@material-ui/icons/Code';\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\nimport ChatOutlinedIcon from '@material-ui/icons/ChatOutlined';\nimport Badge from '@material-ui/core/Badge';\nimport {ResponseDisplay} from './ResponseDisplay';\nimport { useSnackbar } from 'notistack';\nimport RateReviewOutlinedIcon from '@material-ui/icons/RateReviewOutlined';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport {TaskCommentDialog} from './TaskCommentDialog';\nimport { useTheme } from '@material-ui/core/styles';\nimport {muiTheme} from '../../../themes/Themes.js';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport {TaskOpsecDialog} from './TaskOpsecDialog';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputIcon from '@material-ui/icons/Input';\nimport {TaskViewParametersDialog} from './TaskViewParametersDialog';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '99%',\n    marginTop: \"3px\",\n    marginBottom: \"2px\",\n    marginLeft: \"3px\",\n    marginRight: \"0px\",\n    height: \"auto\"\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    whiteSpace: \"pre-line\"\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n    overflow: \"hidden\", \n    display: \"block\", \n    textOverflow: \"ellipsis\", \n    maxWidth: \"calc(90vw)\", \n    whiteSpace: \"nowrap\"\n  },\n  secondaryHeadingExpanded: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n    display: \"block\", \n    overflow: \"auto\",\n    maxWidth: \"calc(90vw)\", \n    whiteSpace: \"break-word\"\n  },\n  icon: {\n    verticalAlign: 'middle',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    padding: \"0 5px 0 0\",\n    display: \"inline-block\",\n    margin: 0,\n    height: \"auto\"\n  },\n}));\nconst accordionUseStyles = makeStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: 0,\n    height: \"auto\"\n  },\n  content: {\n    margin: 0,\n    height: \"100%\",\n    padding: 0,\n  },\n  expandIcon: {\n    margin: 0,\n  }\n}));\n\nexport const TaskDisplay = (props) =>{\n    const me = useReactiveVar(meState);\n    const { enqueueSnackbar } = useSnackbar();\n    const dropdownAnchorRef = React.useRef(null);\n    const [enableBrowserscripts, setEnableBrowserscripts] = React.useState(true);\n    const [lastSeenResponse, setLastSeenResponse] = React.useState(0);\n    const [displayTime, setDisplayTime] = React.useState(\"\");\n    const [displayComment, setDisplayComment] = React.useState(false);\n    const [dropdownOpen, setDropdownOpen] = React.useState(false);\n    const [alertBadges, setAlertBadges] = React.useState(0);\n    const [openCommentDialog, setOpenCommentDialog] = React.useState(false);\n    const [openParametersDialog, setOpenParametersDialog] = React.useState(false);\n    const [openOpsecDialog, setOpenOpsecDialog] = React.useState(false);\n    const [commandID, setCommandID] = React.useState(0);\n    const [browserScripts, setBrowserScripts] = React.useState({});\n    const [task, setTask] = React.useState({});\n    const classes = useStyles();\n    const accordionClasses = accordionUseStyles();\n    const toggleBrowserscripts = () => {\n        setEnableBrowserscripts(!enableBrowserscripts);\n    }\n    const getTaskStatus = () => {\n        if(props.task.status === \"error\"){\n             return (<Button size=\"small\" style={{padding: \"0\", color: muiTheme.palette.error.main}}>Error</Button>)\n        }else if(props.task.completed){\n             return (<Button size=\"small\" style={{padding: \"0\", color: muiTheme.palette.success.main}}>Completed</Button>)\n        }else if(props.task.status === \"submitted\" || props.task.status === \"processing\"){\n             return (<Button size=\"small\" style={{padding: \"0\", color: muiTheme.palette.info.main}}>{props.task.status}</Button>)\n        }else if(props.task.opsec_pre_blocked && !props.task.opsec_pre_bypassed){\n            return (<Button size=\"small\" style={{padding: \"0\", color: muiTheme.palette.warning.main}}>OPSEC Blocked (PRE)</Button>)\n        }else if(props.task.opsec_post_blocked && !props.task.opsec_post_bypassed){\n            return (<Button size=\"small\" style={{padding: \"0\", color: muiTheme.palette.warning.main}}>OPSEC Blocked (POST)</Button>)\n        }else{\n             return (<Button size=\"small\" style={{padding: \"0\", color: muiTheme.palette.info.main}}>{props.task.status}</Button>)\n        }\n    }\n    const getTaskStatusColor = () => {\n        if(props.task.status === \"error\"){\n             return muiTheme.palette.error.main;\n        }else if(props.task.completed){\n             return muiTheme.palette.success.main;\n        }else if(props.task.status === \"submitted\" || props.task.status === \"processing\"){\n             return muiTheme.palette.info.main;\n        }else if(props.task.opsec_pre_blocked && !props.task.opsec_pre_bypassed){\n            return muiTheme.palette.warning.main;\n        }else if(props.task.opsec_post_blocked && !props.task.opsec_post_bypassed){\n            return muiTheme.palette.warning.main;\n        }else{\n             return muiTheme.palette.info.main;\n        }\n    }\n    const prevResponses = useRef(props.task.responses);\n    useEffect( () => {\n        //console.log(\"in use effect\", prevResponses.current, props.task.responses);\n        if(!dropdownOpen){\n            if(props.task.responses.length > prevResponses.current.length){\n                if(props.task.responses[props.task.responses.length -1].id > lastSeenResponse){\n                    setAlertBadges(props.task.responses.length - prevResponses.current.length);\n                    setLastSeenResponse(props.task.responses[props.task.responses.length -1].id);\n                }\n            }\n        }else{\n            setAlertBadges(0);\n            \n        }\n    }, [props.task.responses, dropdownOpen]);\n    const toggleTaskDropdown = (event, newExpanded) => {\n        if(newExpanded){\n            setAlertBadges(0);\n        }\n        setDropdownOpen(newExpanded);\n    }\n    const copyToClipboard = () => {\n        let result = copyStringToClipboard(props.task.original_params);\n        if(result){\n            enqueueSnackbar(\"Copied text!\", {variant: \"success\"});\n        }else{\n            enqueueSnackbar(\"Failed to copy text\", {variant: \"error\"});\n        }\n    }\n    const toggleDisplayComment = (evt) => {\n        evt.stopPropagation();\n        setDisplayComment(!displayComment);\n    }\n    useEffect( () => {\n        setTask(props.task);\n        setCommandID(props.command_id);\n        setBrowserScripts(props.browserscripts);\n        console.log(\"task, command, or browserscripts changed in taskdisplay\");\n    }, [props.task, props.command_id, props.browserscripts]);\n  return (\n    <Paper className={classes.root} elevation={5}>\n      <Accordion TransitionProps={{ unmountOnExit: true }} onChange={toggleTaskDropdown} >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1c-content\"\n          id=\"panel1c-header\"\n          style={{paddingLeft: 0}}\n          classes={{content: accordionClasses.content, expandIcon: accordionClasses.expandIcon, root: accordionClasses.root}}\n        >  \n          <span style={{display: \"flex\", margin: 0, borderWidth: 0, padding: 0, minHeight: \"48px\", alignItems: \"center\", height: \"100%\", borderLeft: \"6px solid \" + getTaskStatusColor(), paddingLeft: \"5px\"}}>\n              <div>\n                {displayComment ? (\n                    <React.Fragment>\n                        <Typography className={classes.secondaryHeading}>{props.task.commentOperator.username}</Typography>\n                        <Typography className={classes.heading}>{props.task.comment}</Typography>\n                    </React.Fragment>\n                  ) : (null)}\n                  \n                  <div>\n                    <div className={classes.column}>\n                        <Badge badgeContent={alertBadges} color=\"secondary\" anchorOrigin={{vertical: 'top', horizontal: 'left'}}>\n                            {getTaskStatus()}\n                        </Badge>\n                      </div>\n                      {props.task.comment != \"\" ? (\n                        <div className={classes.column}>\n                            <IconButton size=\"small\" style={{padding: \"0\", color: muiTheme.palette.info.main}} onClick={toggleDisplayComment}><ChatOutlinedIcon/></IconButton>\n                          </div>\n                      ) : (null)}\n                      <div className={classes.column}>\n                        <Typography className={classes.heading}>{props.task.command === null ? (props.task.original_params) : (props.task.command.cmd)}</Typography>\n                      </div><br/>\n                      <div className={classes.column} >\n                        <Typography className={dropdownOpen ? classes.secondaryHeadingExpanded : classes.secondaryHeading}>{props.task.command === null ? (null) : (props.task.display_params)}</Typography>\n                      </div>\n                </div>\n            </div>\n            \n          </span>\n         \n        </AccordionSummary>\n        \n        <AccordionActions style={{ padding: \"0px\", width: \"100%\"}}>\n          <div className={classes.column} >\n            <Typography className={classes.secondaryHeading}>Task: {props.task.id}, {props.task.operator.username}, {toLocalTime(props.task.timestamp, me.user.view_utc_time)}</Typography>\n          </div>\n          <div className={classes.column}>\n              <Tooltip title=\"Download output\"><IconButton size=\"small\" style={{color: muiTheme.palette.info.main}}><GetAppIcon/></IconButton></Tooltip>\n              <Tooltip title=\"Link Task\"><IconButton size=\"small\" style={{color: muiTheme.palette.info.main}} href={'/new/task/' + props.task.id} target=\"_blank\"><LinkIcon/></IconButton></Tooltip>\n              <Tooltip title=\"Toggle Browser Script\"><IconButton size=\"small\" style={{color: muiTheme.palette.info.main}} onClick={()=>toggleBrowserscripts()}><CodeIcon/></IconButton></Tooltip>\n              <Tooltip title=\"Copy original params to clipboard\"><IconButton size=\"small\" style={{color: muiTheme.palette.info.main}} onClick={copyToClipboard}><FileCopyOutlinedIcon/></IconButton></Tooltip>\n              <Tooltip title=\"Edit Comment\"><IconButton size=\"small\" style={{color: muiTheme.palette.info.main}} onClick={()=>{setOpenCommentDialog(true);}}><RateReviewOutlinedIcon/></IconButton></Tooltip>\n              <MythicDialog fullWidth={true} maxWidth=\"md\" open={openCommentDialog} \n                    onClose={()=>{setOpenCommentDialog(false);}} \n                    innerDialog={<TaskCommentDialog task_id={props.task.id} onClose={()=>{setOpenCommentDialog(false);}} />}\n                />\n              <Tooltip title=\"View All Parameters\"><IconButton size=\"small\" style={{color: muiTheme.palette.info.main}} onClick={()=>{setOpenParametersDialog(true);}}><InputIcon/></IconButton></Tooltip>\n              {props.task.opsec_pre_blocked === null ? (\n                <Tooltip title=\"No OPSEC PreCheck data\"><IconButton size=\"small\" style={{color: muiTheme.palette.disabled.main}}><LockOpenIcon/></IconButton></Tooltip>\n              ) : (  props.task.opsec_pre_bypassed === false ? (\n                        <Tooltip title=\"Submit OPSEC PreCheck Bypass Request\"><IconButton size=\"small\" style={{color: muiTheme.palette.error.main}} onClick={()=>{setOpenOpsecDialog(true);}}><LockIcon/></IconButton></Tooltip>\n                    ) : (\n                        <Tooltip title=\"View OPSEC PreCheck Data\"><IconButton size=\"small\" style={{color: muiTheme.palette.success.main}} onClick={()=>{setOpenOpsecDialog(true);}}><LockOpenIcon/></IconButton></Tooltip>\n                    )             \n                ) \n              }\n              {props.task.opsec_post_blocked === null ? (\n                <Tooltip title=\"No OPSEC PostCheck data\"><IconButton size=\"small\" style={{color: muiTheme.palette.disabled.main}}><LockOpenIcon/></IconButton></Tooltip>\n              ) : (  props.task.opsec_post_bypassed === false ? (\n                        <Tooltip title=\"Submit OPSEC PostCheck Bypass Request\"><IconButton size=\"small\" style={{color: muiTheme.palette.error.main}} onClick={()=>{setOpenOpsecDialog(true);}}><LockIcon/></IconButton></Tooltip>\n                    ) : (\n                        <Tooltip title=\"View OPSEC PostCheck Data\"><IconButton size=\"small\" style={{color: muiTheme.palette.success.main}} onClick={()=>{setOpenOpsecDialog(true);}}><LockOpenIcon/></IconButton></Tooltip>\n                    )             \n                ) \n              }\n              <MythicDialog fullWidth={true} maxWidth=\"md\" open={openOpsecDialog} \n                    onClose={()=>{setOpenOpsecDialog(false);}} \n                    innerDialog={<TaskOpsecDialog task_id={props.task.id} onClose={()=>{setOpenOpsecDialog(false);}} />}\n                />\n              <MythicDialog fullWidth={true} maxWidth=\"md\" open={openParametersDialog} \n                    onClose={()=>{setOpenParametersDialog(false);}} \n                    innerDialog={<TaskViewParametersDialog task_id={props.task.id} onClose={()=>{setOpenParametersDialog(false);}} />}\n                />\n          </div>\n        </AccordionActions>\n        <AccordionDetails className={classes.details}>\n          <ResponseDisplay task={task} browserscripts={browserScripts} command_id={commandID} enable_browserscripts={enableBrowserscripts}/>\n        </AccordionDetails>\n      </Accordion>\n    </Paper>\n  );\n}\nTaskDisplay.whyDidYouRender = true;\n","/mythic/src/components/pages/Callbacks/TaskParametersDialogRow.js",["455"],"import React, {useEffect} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Switch from '@material-ui/core/Switch';\nimport Input from '@material-ui/core/Input';\nimport {Button} from '@material-ui/core';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\nimport Paper from '@material-ui/core/Paper';\nimport TableHead from '@material-ui/core/TableHead';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {muiTheme} from '../../../themes/Themes.js';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport {Typography} from '@material-ui/core';\n\nexport function TaskParametersDialogRow(props){\n    const [value, setValue] = React.useState('');\n    const [boolValue, setBoolValue] = React.useState(false);\n    const [choiceMultipleValue, setChoiceMultipleValue] = React.useState([]);\n    const [agentConnectNewHost, setAgentConnectNewHost] = React.useState(\"\");\n    const [agentConnectNewPayload, setAgentConnectNewPayload] = React.useState(0);\n    const [agentConnectHost, setAgentConnectHost] = React.useState();\n    const [agentConnectPayloadOptions, setAgentConnectPayloadOptions] = React.useState([]);\n    const [agentConnectPayload, setAgentConnectPayload] = React.useState();\n    const [agentConnectC2ProfileOptions, setAgentConnectC2ProfileOptions] = React.useState([]);\n    const [agentConnectC2Profile, setAgentConnectC2Profile] = React.useState();\n    const [openAdditionalPayloadOnHostMenu, setOpenAdditionalPayloadOnHostmenu] = React.useState(false);\n    const [fileValue, setFileValue] = React.useState({name: \"\"});\n    useEffect( () => {\n       if(props.type === \"Boolean\"){\n            setBoolValue(props.value);\n            setValue(props.value);\n       }else if(props.type === \"ChoiceMultiple\"){\n            setChoiceMultipleValue(props.value);\n            setValue(props.value);\n       }\n       else if(props.type === \"AgentConnect\"){\n            if(props.choices.length > 0){\n                setAgentConnectHost(0);\n                setAgentConnectPayloadOptions(props.choices[0][\"payloads\"]);\n                if(props.choices[0][\"payloads\"].length > 0){\n                    setAgentConnectPayload(0);  \n                    if(props.choices[0][\"payloads\"][0][\"c2info\"].length > 0){\n                        setAgentConnectC2ProfileOptions(props.choices[0][\"payloads\"][0][\"c2info\"]);\n                        setAgentConnectC2Profile(0);\n                    }\n                }else{\n                \n                }\n            }else{\n            \n            }\n       }else{\n            setValue(props.default_value);\n       }\n    }, []);\n    const onChangeAgentConnect = (host_index, payload_index, c2_index) => {\n        const c2profileparameters = props.choices[host_index][\"payloads\"][payload_index][\"c2info\"][c2_index].parameters.map( (opt) => {\n            return { [opt.name]: opt.value}\n        });\n        let agentConnectValue = {host: props.choices[host_index][\"host\"], agent_uuid: props.choices[host_index][\"payloads\"][payload_index].uuid,\n        c2_profile: {name: props.choices[host_index][\"payloads\"][payload_index][\"c2info\"][c2_index].name, parameters: c2profileparameters}};\n        if(props.choices[host_index][\"payloads\"][payload_index].type === \"callback\"){\n            agentConnectValue[\"callback_uuid\"] = props.choices[host_index][\"payloads\"][payload_index][\"agent_callback_id\"];\n        }\n        props.onChange(props.name, agentConnectValue, false);\n    }\n    const onChangeLinkInfo = (index) => {\n        let choice;\n        if(props.choices[index][\"source\"][\"id\"] === props.callback_id){\n            choice = props.choices[index][\"source\"];\n        }else{\n            choice = props.choices[index][\"destination\"];\n        }\n        const c2profileparameters = choice[\"c2profileparametersinstances\"].reduce( (prev, opt) => {\n            if(opt.c2_profile_id === props.choices[index][\"c2profile\"][\"id\"]){\n                return [...prev, { [opt.c2profileparameter.name]: !opt.c2profileparameter.crypto_type ? opt.value : {crypto_type: opt.c2profileparameter.crypto_type, enc_key: opt.enc_key, dec_key: opt.dec_key} } ]\n            }else{\n                return prev;\n            }\n        }, []);\n        let agentConnectValue = {host: choice.host, agent_uuid: choice.payload.uuid, callback_uuid: choice.agent_callback_id, c2_profile: {name: props.choices[index][\"c2profile\"][\"name\"], parameters: c2profileparameters} };\n        props.onChange(props.name, agentConnectValue, false);\n        setValue(index);\n    }\n    const onChangeValue = (evt) => {\n        setValue(evt.target.value);\n        props.onChange(props.name, evt.target.value, false);\n    }\n    const onChangeChoiceMultiple = (event) => {\n        const { options } = event.target;\n        const value = [];\n        for (let i = 0, l = options.length; i < l; i += 1) {\n          if (options[i].selected) {\n            value.push(options[i].value);\n          }\n        }\n        setChoiceMultipleValue(value);\n        setValue(value);\n        props.onChange(props.name, value, false);\n    }\n    const onChangeText = (name, value, error) => {\n        setValue(value);\n        props.onChange(props.name, value, error);\n    }\n    const onChangeNumber = (name, value, error) => {\n        setValue(parseInt(value));\n        props.onChange(props.name, parseInt(value), error);\n    }\n    const onSwitchChange = (name, value) => {\n        setBoolValue(value);\n        setValue(value);\n        props.onChange(name, value);\n    }\n    const onFileChange = (evt) => {\n        \n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const contents = btoa(e.target.result);\n            setFileValue({name: evt.target.files[0].name, contents: contents});\n            props.onChange(props.name, {name: evt.target.files[0].name, contents: contents});\n        }\n        reader.readAsBinaryString(evt.target.files[0]);\n        \n    }\n    const onChangeAgentConnectHost = (event) => {\n        setAgentConnectHost(event.target.value); \n        setAgentConnectPayloadOptions(props.choices[event.target.value][\"payloads\"]);\n        if(props.choices[event.target.value][\"payloads\"].length > 0){\n            setAgentConnectPayload(0);  \n            if(props.choices[event.target.value][\"payloads\"][0][\"c2info\"].length > 0){\n                setAgentConnectC2ProfileOptions(props.choices[0][\"payloads\"][0][\"c2info\"]);\n                setAgentConnectC2Profile(0);\n                onChangeAgentConnect(event.target.value, 0, 0);\n            }else{\n                setAgentConnectC2ProfileOptions([]);\n                setAgentConnectC2Profile(null);\n            }\n        }else{\n            setAgentConnectPayloadOptions([]);\n            setAgentConnectPayload(null);\n            setAgentConnectC2ProfileOptions([]);\n            setAgentConnectC2Profile(null);\n        }\n    }\n    \n    const onChangeAgentConnectPayload = (event) => {\n        setAgentConnectPayload(event.target.value);\n        setAgentConnectC2ProfileOptions(props.choices[agentConnectHost][\"payloads\"][event.target.value][\"c2info\"]);\n        if(props.choices[agentConnectHost][\"payloads\"][event.target.value][\"c2info\"].length > 0){\n            setAgentConnectC2Profile(0);\n            onChangeAgentConnect(agentConnectHost, event.target.value, 0);\n        }else{\n            setAgentConnectC2Profile(null);\n        }\n    }\n    const onChangeAgentConnectC2Profile = (event) => {\n        setAgentConnectC2Profile(event.target.value);\n        onChangeAgentConnect(agentConnectHost, agentConnectPayload, event.target.value);\n    }\n    const onChangeAgentConnectNewHost = (name, value, error) => {\n        setAgentConnectNewHost(value);\n    }\n    const onChangeAgentConnectNewPayload = (event) => {\n        setAgentConnectNewPayload(event.target.value);\n    }\n    const onAgentConnectAddNewPayloadOnHost = () => {\n        props.onAgentConnectAddNewPayloadOnHost(agentConnectNewHost, props.payload_choices[agentConnectNewPayload].id);\n        setOpenAdditionalPayloadOnHostmenu(false);\n    }\n    const testParameterValues = (curVal) => {\n        if( props.required && props.verifier_regex !== \"\"){\n            return !RegExp(props.verifier_regex).test(curVal);\n        }else if(props.verifier_regex !== \"\" && curVal !== \"\"){\n            return !RegExp(props.verifier_regex).test(curVal);\n        }else{\n            return false;\n        }\n    }\n    const getParameterObject = () => {\n        switch(props.type){\n            case \"Choice\":\n            case \"ChoiceMultiple\":\n                return (\n                    <FormControl>\n                        <Select\n                          native\n                          multiple={props.type === \"ChoiceMultiple\"}\n                          value={props.type === \"ChoiceMultiple\" ? choiceMultipleValue : value}\n                          onChange={props.type === \"ChoiceMultiple\" ? onChangeChoiceMultiple : onChangeValue}\n                          input={<Input />}\n                        >\n                        {\n                            props.choices.map((opt, i) => (\n                                <option key={props.name + i} value={opt}>{opt}</option>\n                            ))\n                        }\n                        </Select>\n                    </FormControl>\n                )\n            case \"String\":\n                return (\n                    <MythicTextField required={props.required} placeholder={props.default_value} value={value} multiline={true}\n                        onChange={onChangeText} display=\"inline-block\"\n                        validate={testParameterValues} errorText={\"Must match: \" + props.verifier_regex}\n                    />\n                )\n            case \"Number\":\n                return (\n                    <MythicTextField required={props.required} placeholder={props.default_value} value={value} multiline={false} type=\"number\"\n                        onChange={onChangeNumber} display=\"inline-block\"\n                        validate={testParameterValues} errorText={\"Must match: \" + props.verifier_regex}\n                    />\n                )\n            case \"Boolean\":\n                return (\n                    <Switch checked={boolValue} onChange={onSwitchChange} />\n                )\n            case \"File\":\n                return (\n                    <Button variant=\"contained\" component=\"label\"> \n                        { fileValue.name === \"\" ? \"Select File\" : fileValue.name } \n                    <input onChange={onFileChange} type=\"file\" hidden /> </Button>\n                )\n            case \"LinkInfo\":\n                return (\n                    <FormControl>\n                        <Select\n                          native\n                          value={value}\n                          onChange={(evt) => {onChangeLinkInfo(evt.target.value)}}\n                          input={<Input />}\n                        >\n                        {\n                            props.choices.map((opt, i) => (\n                                <option key={props.name + i} value={i}>{opt.display}</option>\n                            ))\n                        }\n                        </Select>\n                    </FormControl>\n                )\n            case \"PayloadList\":\n                return (\n                    <FormControl>\n                        <Select\n                          native\n                          value={value}\n                          onChange={onChangeValue}\n                          input={<Input />}\n                        >\n                        {\n                            props.choices.map((opt, i) => (\n                                <option key={props.name + i} value={opt.uuid}>{opt.display}</option>\n                            ))\n                        }\n                        </Select>\n                    </FormControl>\n                )\n            case \"AgentConnect\":\n                return (\n                    <TableContainer component={Paper} className=\"mythicElement\"> \n                        <Table size=\"small\" style={{\"tableLayout\": \"fixed\", \"maxWidth\": \"100%\", \"overflow\": \"scroll\"}}>\n                            <TableBody>\n                                {openAdditionalPayloadOnHostMenu ? (\n                                <React.Fragment>\n                                    <TableRow>\n                                        <TableCell style={{width: \"6em\"}}>Hostname</TableCell>\n                                        <TableCell>\n                                            <MythicTextField required={true} placeholder={\"hostname\"} value={agentConnectNewHost} multiline={false}\n                                                onChange={onChangeAgentConnectNewHost} display=\"inline-block\"/>\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>Payload on that host</TableCell>\n                                        <TableCell>\n                                            <FormControl>\n                                                <Select\n                                                  native\n                                                  value={agentConnectNewPayload}\n                                                  onChange={onChangeAgentConnectNewPayload}\n                                                  input={<Input />}\n                                                >\n                                                {props.payload_choices ? (\n                                                    props.payload_choices.map((opt, i) => (\n                                                        <option key={props.name + \"newpayload\" + i} value={i}>{opt.display}</option>\n                                                    ))\n                                                ) : ( <option key={props.name + \"nooptionnewpayload\"} value=\"-1\">No Payloads</option> )}\n                                                </Select>\n                                            </FormControl>\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell>\n                                            <Button component=\"span\" variant=\"contained\" style={{backgroundColor: muiTheme.palette.success.main, padding: 0, color: \"white\"}} onClick={onAgentConnectAddNewPayloadOnHost}><AddCircleIcon />Add</Button>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Button component=\"span\" style={{color: muiTheme.palette.warning.main, padding: 0}} onClick={() =>{setOpenAdditionalPayloadOnHostmenu(false)}}><CancelIcon />Cancel</Button>\n                                        </TableCell>\n                                    </TableRow>\n                                </React.Fragment>\n                                ) : (null) }\n                                <TableRow>\n                                    <TableCell style={{width: \"6em\"}}>\n                                        Host \n                                        <IconButton component=\"span\" variant=\"contained\" style={{color: muiTheme.palette.success.main, padding: 0}} onClick={() =>{setOpenAdditionalPayloadOnHostmenu(true)}}><AddCircleIcon /></IconButton>\n                                        <IconButton component=\"span\" variant=\"contained\" style={{color: muiTheme.palette.error.main, padding: 0}}><DeleteIcon /></IconButton>\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormControl>\n                                            <Select\n                                              native\n                                              value={agentConnectHost}\n                                              onChange={onChangeAgentConnectHost}\n                                              input={<Input />}\n                                            >\n                                            {\n                                                props.choices.map((opt, i) => (\n                                                    <option key={props.name + \"connecthost\" + i} value={i}>{opt.host}</option>\n                                                ))\n                                            }\n                                            </Select>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>Payload</TableCell>\n                                    <TableCell>\n                                        <FormControl>\n                                            <Select\n                                              native\n                                              value={agentConnectPayload}\n                                              onChange={onChangeAgentConnectPayload}\n                                              input={<Input />}\n                                            >\n                                            {\n                                                agentConnectPayloadOptions.map((opt, i) => (\n                                                    <option key={props.name + \"connectagent\" + i} value={i}>{opt.display}</option>\n                                                ))\n                                            }\n                                            </Select>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>C2 Profile</TableCell>\n                                    <TableCell>\n                                        <FormControl>\n                                                <Select\n                                                  native\n                                                  value={agentConnectC2Profile}\n                                                  onChange={onChangeAgentConnectC2Profile}\n                                                  input={<Input />}\n                                                >\n                                                {\n                                                    agentConnectC2ProfileOptions.map((opt, i) => (\n                                                        <option key={props.name + \"connectprofile\" + i} value={i}>{opt.name}</option>\n                                                    ))\n                                                }\n                                                </Select>\n                                            </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                        {agentConnectC2ProfileOptions.length > 0 ? (\n                            <Table size=\"small\" style={{\"tableLayout\": \"fixed\", \"maxWidth\": \"100%\", \"overflow\": \"scroll\"}}>\n                                <TableHead>\n                                        <TableRow>\n                                            <TableCell style={{width: \"30%\"}}>Parameter</TableCell>\n                                            <TableCell>Value</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                <TableBody>\n                                    \n                                    {agentConnectC2ProfileOptions[agentConnectC2Profile][\"parameters\"].map( (opt) => (\n                                        <TableRow>\n                                            <TableCell>{opt.name}</TableCell>\n                                            <TableCell><pre>{JSON.stringify(opt.value, null, 2)}</pre></TableCell>\n                                        </TableRow>\n                                    ) ) }\n                                </TableBody>\n                            </Table>\n                        ): (null)}\n                    </TableContainer>\n                )\n           default:\n            return null\n        }\n    }\n    \n    return (\n            <TableRow key={\"buildparam\" + props.id}>\n                <TableCell>{props.description}\n                {props.required ? (\n                    <Typography style={{color: muiTheme.palette.warning.main}}>Required</Typography>\n                ) : (null) }\n                 </TableCell>\n                <TableCell>\n                    {getParameterObject()}\n                </TableCell>\n            </TableRow>\n        )\n}\n\n","/mythic/src/components/pages/Callbacks/TaskViewParametersDialog.js",["456","457"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\nimport {useQuery, gql, useReactiveVar, useMutation} from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { meState } from '../../../cache';\n\nconst getParametersQuery = gql`\nquery getParametersQuery ($task_id: Int!) {\n  task_by_pk(id: $task_id) {\n    display_params\n    original_params\n    params\n    id\n  }\n}\n`;\n\nexport function TaskViewParametersDialog(props) {\n    const [comment, setComment] = useState(\"\");\n    const me = useReactiveVar(meState);\n    const { loading, error } = useQuery(getParametersQuery, {\n        variables: {task_id: props.task_id},\n        onCompleted: data => {\n            setComment(\"Original Parameters:\\n\" + data.task_by_pk.original_params + \"\\n\\nAgent Parameters:\\n\" + data.task_by_pk.params + \"\\n\\nDisplay Parameters:\\n\" + data.task_by_pk.display_params);\n        },\n        fetchPolicy: \"network-only\"\n    });\n    if (loading) {\n     return <LinearProgress />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n  return (\n    <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">View Task Parameters</DialogTitle>\n        <DialogContent dividers={true}>\n            <MythicTextField multiline={true} value={comment} onChange={() => {}}/>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/pages/Callbacks/TaskOpsecDialog.js",["458"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\nimport {useQuery, gql, useReactiveVar, useMutation} from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { meState } from '../../../cache';\nimport { useSnackbar } from 'notistack';\n\nconst updateOpsecRequestMutation = gql`\nmutation requestOpsecBypass ($task_id: Int!) {\n    requestOpsecBypass(task_id: $task_id){\n        status\n        error\n    }\n}\n`;\nconst getOpsecQuery = gql`\nquery getOPSECQuery ($task_id: Int!) {\n  task_by_pk(id: $task_id) {\n    opsec_pre_blocked\n    opsec_pre_message\n    opsec_pre_bypassed\n    opsec_pre_bypass_user{\n        username\n    }\n    opsec_post_blocked\n    opsec_pre_bypass_role\n    opsec_post_message\n    opsec_post_bypassed\n    opsec_post_bypass_role\n    opsec_post_bypass_user{\n        username\n    }\n    id\n  }\n}\n`;\n\nexport function TaskOpsecDialog(props) {\n    const [opsecMessage, setOpsecMessage] = useState(\"\");\n    const [opsecData, setOpsecData] = useState({});\n    const me = useReactiveVar(meState);\n    const { enqueueSnackbar } = useSnackbar();\n    const { loading, error } = useQuery(getOpsecQuery, {\n        variables: {task_id: props.task_id},\n        onCompleted: data => {\n            let message = \"OPSEC PreCheck Message\";\n            if(data.task_by_pk.opsec_pre_bypass_user !== null){\n                message += \" (bypassed by \" + data.task_by_pk.opsec_pre_bypass_user.username + \")\";\n            }\n            message += \":\\n\\n\" + data.task_by_pk.opsec_pre_message + \"\\n\";\n            if(data.task_by_pk.opsec_post_blocked){\n                message += \"\\nOPSEC PostCheck Message\";\n                if(data.task_by_pk.opsec_post_bypass_user.username !== null){\n                    message += \" (bypassed by \" + data.task_by_pk.opsec_post_bypass_user.username + \")\";\n                }\n                message += \":\\n\\n\" + data.task_by_pk.opsec_post_messsage + \"\\n\";\n                \n            }\n            setOpsecData(data.task_by_pk);\n            setOpsecMessage(message);\n        },\n        fetchPolicy: \"network-only\"\n    });\n    const [updateOpsecRequest] = useMutation(updateOpsecRequestMutation, {\n        update: (cache, {data}) => {\n            if(data.requestOpsecBypass.status === \"success\"){\n                enqueueSnackbar(\"Bypass processed successfully\", {variant: \"success\"});\n            }else{\n                enqueueSnackbar(data.requestOpsecBypass.error, {variant: \"warning\"});\n            }\n        }\n    });\n    if (loading) {\n     return <LinearProgress />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    const onRequestSubmit = () => {\n       console.log(props.task_id);\n        updateOpsecRequest({variables: {task_id: props.task_id}});\n        props.onClose();\n    }\n  \n  return (\n    <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">Request OPSEC Bypass</DialogTitle>\n        <DialogContent dividers={true}>\n            <MythicTextField multiline={true} onChange={()=>{}} value={opsecMessage} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n          {(opsecData.opsec_pre_blocked === true && !opsecData.opsec_pre_bypassed) || (opsecData.opsec_post_blocked === true && !opsecData.opsec_post_bypassed) ?\n          (\n            <Button onClick={onRequestSubmit} color=\"secondary\">Submit Bypass Request</Button>\n          ) : (null) }\n          \n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/pages/Callbacks/TaskCommentDialog.js",[],"/mythic/src/components/pages/Callbacks/ResponseDisplay.js",["459","460","461","462"],"import React, {useEffect, useState} from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {useSubscription, gql, useLazyQuery } from '@apollo/client';\nimport {useReactiveVar} from '@apollo/client';\nimport { meState } from '../../../cache';\nimport {ResponseDisplayBrowserScript} from './ResponseDisplayBrowserScript';\n\n\nconst subResponsesQuery = gql`\nsubscription subResponsesQuery($task_id: Int!) {\n  response(where: {task_id: {_eq: $task_id}}) {\n    id\n    response: response_text\n  }\n}`;\n\nexport const ResponseDisplay = (props) =>{\n    const [commandID, setCommandID] = React.useState(0);\n    const [browserScripts, setBrowserScripts] = React.useState({});\n    const [task, setTask] = React.useState({});\n    const [enableBrowserscripts, setEnableBrowserscripts] = React.useState(true);\n    const {loading, error, data} = useSubscription(subResponsesQuery, {variables: {task_id: props.task.id}, fetchPolicy: \"cache-and-network\"});\n    useEffect( () => {\n        setCommandID(props.command_id);\n        setBrowserScripts(props.browserscripts);\n        setTask(props.task);\n        setEnableBrowserscripts(props.enable_browserscripts);\n        console.log(props.command_id, props.browserscripts);\n    }, [props.command_id, props.task, props.browserscripts, props.enable_browserscripts]);\n    \n    if (loading) {\n     return <LinearProgress style={{paddingTop: \"10px\"}}/>;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    \n    if (!data) {\n        return <LinearProgress style={{paddingTop: \"10px\"}}/>;\n    }else if(data.response.length === 0){\n        return (\n            <div style={{overflow: \"auto\", width: \"100%\"}}> \n                <pre>No data for task</pre>\n          </div>\n        )\n    }\n\n  return (\n      <div style={{overflow: \"auto\", width: \"100%\"}}>\n        {commandID in browserScripts && browserScripts && enableBrowserscripts ? (\n            <ResponseDisplayBrowserScript browserScripts={browserScripts} commandID={commandID} task={task} data={data} />\n        ) : (\n            data.response.map( (response) => (\n                <pre key={\"task\" + task.id + \"resp\" + response.id}>{response.response}</pre>\n        ) ) \n        ) }\n        \n      </div>\n  )\n      \n}\nResponseDisplay.whyDidYouRender = true;\n\n","/mythic/src/components/utilities/Time.js",[],"/mythic/src/components/utilities/Clipboard.js",[],"/mythic/src/components/pages/Callbacks/ResponseDisplayBrowserScript.js",["463","464","465","466","467","468"],"import React, {useEffect} from 'react';\n\nexport const ResponseDisplayBrowserScript = (props) =>{\n    const [tables, setTables] = React.useState([]);\n    const [collapse, setCollapse] = React.useState([]);\n    useEffect( () => {\n        let design = props.browserScripts[props.commandID](props.task, props.data.response);\n        \n    }, [props.task, props.data.response]);\n  return (\n\n    <div dangerouslySetInnerHTML={{__html: props.browserScripts[props.commandID](props.task, props.data.response)}}></div>\n       \n  )\n      \n}\nResponseDisplayBrowserScript.whyDidYouRender = true;\n\n","/mythic/src/components/pages/Callbacks/C2PathDialog.js",["469","470","471","472","473"],"import React, {useRef, useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport * as d3 from 'd3';\nimport {createContextMenu} from './D3ContextMenu';\nimport dagreD3 from 'dagre-d3';\nimport {muiTheme} from '../../../themes/Themes.js';\n\nexport function C2PathDialog(props) {\n    const dagreRef = useRef(null);   \n    const [reZoom, setReZoom] = useState(true);\n    const include_disconnected = true;\n    const rankDir = \"LR\";\n    const node_labels = [\"id\"];\n    const view_config = {\n        rankDir: \"LR\",\n        label_components: [\"id\"],\n        packet_flow_view: true,\n        include_disconnected: true,\n        show_all_nodes: true\n    }\n    const node_events = {\n        \"mouseover\": (parent, node, d) => {return},\n        \"mouseout\": (parent, node, d) => {return},\n        \"click\": (parent, node, d) => {return},\n        \"contextmenu\": []\n    }\n    useEffect( () => {\n        drawC2PathElements(props.callbackgraphedges, dagreRef, reZoom, view_config, node_events);\n        setReZoom(false);\n    }, [props.callbackgraphedges])\n  return (\n    <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">Callback {props.id}'s Egress Path</DialogTitle>\n        <DialogContent dividers={true}>\n            <React.Fragment>\n                <svg ref={dagreRef} id=\"nodeTree\" style={{width: \"100%\", height: \"calc(78vh)\", marginTop: \"10px\"}}></svg>\n            </React.Fragment>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\nconst disconnected = `stroke: ${muiTheme.palette.warning.main}; stroke-width: 3px; stroke-dasharray: 5, 5; fill:none`;\nconst disconnectedArrow = `fill: ${muiTheme.palette.warning.main}`;\nconst connected = `stroke: ${muiTheme.palette.info.main}; fill: none; stroke-width: 1.5px;`;\nconst connectedArrow = `stroke: ${muiTheme.palette.info.main}; fill: ${muiTheme.palette.info.main}; stroke-width: 1.5px;`\nconst nodeColor = `fill: ${muiTheme.palette.success.main}`;\nconst nodeLabelStyle = `labelStyle: \"font-size: 2em\";`;\nconst edgeLabelStyle = `labelStyle: \"font-size: 2em\"`;\nconst add_edge_to_mythic = (g, edge, view_config) => {\n    if(!edge.source.active && !view_config[\"show_all_nodes\"]){return}\n    add_node(g, edge.source, view_config);\n    g.setEdge(edge.source.id, \"Mythic\",  {label: edge.c2profile.name, edge_id: edge.id, end_timestamp: edge.end_timestamp,direction: edge.direction,\n        style: edge.end_timestamp === null ? connected: disconnected, labelStyle: edgeLabelStyle,\n        arrowheadStyle: edge.end_timestamp === null ? connectedArrow : disconnectedArrow}, edge.c2profile.name)\n}\nconst add_node = (g, node, view_config) => {\n    g.setNode(node.id, {label: getLabel(node, view_config[\"label_components\"]),  node: node, style: nodeColor, labelStyle: nodeLabelStyle, shape: 'circle'});\n    g.setNode(node.host, {label: node.host, clusterLabelPos: 'top', style: 'fill:#d3d7e8'});\n    g.setParent(node.id, node.host);\n}\nconst getLabel = (edge, label_components) => {\n    return label_components.map( (name) => {\n        return edge[name]\n    }).join(\", \");\n}\nconst add_edge_p2p = (g, edge, view_config) => {\n    if(!edge.source.active && !edge.destination.active && !view_config[\"show_all_nodes\"]){\n        return;\n    }else if(!view_config[\"show_all_nodes\"]){\n        //at least one of the two nodes is active and we don't want to show all the nodes\n        if(edge.source.active){add_node(g, edge.source, view_config)}\n        if(edge.destination.active){add_node(g, edge.destination, view_config)}\n        // not adding an edge because one of the nodes could be non-existent\n        return;\n    }else{\n        add_node(g, edge.source, view_config);\n        add_node(g, edge.destination, view_config);\n    }\n    if(edge.direction === 1){\n        if(view_config[\"packet_flow_view\"]){\n            createEdge(g, edge, 2);\n        }else{\n            createEdge(g, edge, 1);\n        }\n    }else if(edge.direction === 2){\n        createEdge(g, edge, 2);\n    }else{\n        createEdge(g, edge, 1);\n        createEdge(g, edge, 2);\n    }\n}\nconst createEdge = (g, edge, adjusted_direction) =>{\n    if(adjusted_direction === 1){\n        g.setEdge(edge.source.id, edge.destination.id,  {label: edge.c2profile.name, edge_id: edge.id,end_timestamp: edge.end_timestamp, direction: edge.direction,\n                    style: edge.end_timestamp === null ? connected: disconnected, labelStyle: edgeLabelStyle,\n                    arrowheadStyle: edge.end_timestamp === null ? connectedArrow : disconnectedArrow}, edge.c2profile.name)\n    }else if(adjusted_direction === 2){\n        g.setEdge(edge.destination.id, edge.source.id,  {label: edge.c2profile.name, edge_id: edge.id, end_timestamp: edge.end_timestamp, direction: edge.direction,\n                    style: edge.end_timestamp === null ? connected: disconnected, labelStyle: edgeLabelStyle,\n                    arrowheadStyle: edge.end_timestamp === null ? connectedArrow : disconnectedArrow}, edge.c2profile.name)\n    }\n}\n\nexport const drawC2PathElements = (edges, dagreRef, reZoom, view_config, node_events) =>{\n    var g = new dagreD3.graphlib.Graph({ compound: true, multigraph: true, directed: true}).setGraph({rankdir: view_config[\"rankDir\"]}).setDefaultEdgeLabel(function() {return {}; });\n    var svg = d3.select(dagreRef.current);\n    var test = svg.select(\"g\")._groups[0][0];\n    if(test){\n        var svgGroup = svg.select(\"g\");\n    }else{\n        var svgGroup = svg.append(\"g\");\n    }\n    var zoom = d3.zoom().on(\"zoom\", function() {\n          svgGroup.attr(\"transform\", d3.event.transform);\n        });\n    if(reZoom){\n        svg.select('g.output').remove();\n        svg.call(zoom);\n    }\n    g.setNode(\"Mythic\", {label: \"\", style: nodeColor, shape: 'circle', node: null, labelStyle: nodeLabelStyle});\n    edges.forEach( (edge) => {\n        if(!view_config[\"include_disconnected\"] && edge.end_timestamp !== null){return}\n        if(edge.destination.id === edge.source.id){\n            if(g.hasEdge(edge.source.id, \"Mythic\", edge.c2profile.name)){\n                // we already have an edge to Mythic from our source id, check if this edge is newer or not\n                if(edge.id > g.edge(edge.source.id, \"Mythic\", edge.c2profile.name).edge_id){\n                    add_edge_to_mythic(g, edge, view_config);\n                }\n            }else{\n                //this is a new edge to mythic\n                add_edge_to_mythic(g, edge, view_config);\n            }\n        }else{\n            if(edge.direction === 1){\n                if(!view_config[\"packet_flow_view\"]){\n                    if(g.hasEdge(edge.source.id, edge.destination.id, edge.c2profile.name)){\n                        //we've seen an edge between these two before\n                        if(edge.id > g.edge(edge.source.id, edge.destination.id, edge.c2profile.name).edge_id){\n                            add_edge_p2p(g, edge, view_config);\n                        }else{\n                            console.log(\"doing nothing, dropping data\");\n                        }\n                    }else{\n                        //this is a new edge\n                        add_edge_p2p(g, edge, view_config);\n                    }\n                }else{\n                    if(g.hasEdge(edge.destination.id, edge.source.id, edge.c2profile.name)){\n                        //we've seen an edge between these two before\n                        if(edge.id > g.edge(edge.destination.id, edge.source.id, edge.c2profile.name).edge_id){\n                            add_edge_p2p(g, edge, view_config);\n                        }\n                    }else{\n                        //this is a new edge\n                        add_edge_p2p(g, edge, view_config);\n                    }\n                }\n                \n            }else if(edge.direction === 2){\n                if(g.hasEdge(edge.destination.id, edge.source.id, edge.c2profile.name)){\n                    //we've seen an edge between these two before\n                   \n                    if(edge.id > g.edge(edge.destination.id, edge.source.id, edge.c2profile.name).edge_id){\n                        add_edge_p2p(g, edge, view_config);\n                    }\n                }else{\n                    //this is a new edge\n                    add_edge_p2p(g, edge, view_config);\n                }\n            }\n        }\n    })\n    var render = new dagreD3.render();\n    var width = svg.node().getBoundingClientRect().width;\n    var height = svg.node().getBoundingClientRect().height;\n    render.shapes().circle = function circle(parent, bbox, node) {\n         var shapeSvg = parent.insert(\"image\")\n             .attr(\"class\", \"nodeImage\")\n             .attr(\"xlink:href\", function(d) {\n                 if (node.node) {\n                    return \"/new/agents/\" + node.node.payload.payloadtype.ptype + \".svg\";\n                 }else{\n                    return \"/new/agents/mythic.svg\";\n                 }\n             }).attr(\"x\", \"-20px\")\n             .attr(\"y\", \"-20px\")\n             .attr(\"width\", \"40px\")\n             .attr(\"height\", \"40px\")\n             .on(\"mouseover\", function(d) { node_events[\"mouseover\"](parent, node, d) })\n             .on(\"mouseout\", function(d) { node_events[\"mouseout\"](parent, node, d) })\n             .on(\"click\", function(d) { d3.event.preventDefault(); node_events[\"click\"](parent, node, d) })\n             .on(\"contextmenu\", (d) => {createContextMenu(g, node, node_events[\"contextmenu\"], width, height, \"#callbacksgraph\")});\n         node.intersect = function(point) {\n             return dagreD3.intersect.circle(node, 20, point);\n         };\n         return shapeSvg;\n     };\n\n    render(svgGroup, g);\n\n    if(reZoom){\n        var graphWidth = g.graph().width + 40;\n        var graphHeight = g.graph().height + 40;\n        var zoomScale = Math.min(width / graphWidth, height / graphHeight);\n        var translateX = (width / 2) - ((graphWidth * zoomScale) / 2)\n        var translateY = (height / 2) - ((graphHeight * zoomScale) / 2);\n        var svgZoom = svg.transition().duration(500);\n        svgZoom.call(zoom.transform, d3.zoomIdentity.translate(translateX, translateY).scale(zoomScale));\n    }\n    svgGroup.selectAll(\"g.nodes g.label\")\n        .attr(\"transform\", \"translate(0,30)\");\n}\nexport const getNodeEdges = (g, node) =>{\n    return g.nodeEdges(node);\n}\n\n","/mythic/src/components/MythicComponents/MythicDisplayTextDialog.js",[],"/mythic/src/components/pages/Callbacks/D3ContextMenu.js",[],"/mythic/src/components/MythicComponents/MythicTabPanel.js",[],"/mythic/src/components/pages/C2Profiles/C2ProfilesCard.js",[],"/mythic/src/components/pages/Home/QuickStartCard.js",[],"/mythic/src/components/pages/Payloads/PayloadsTable.js",["474"],"import React, {useEffect} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { PayloadsTableRow } from './PayloadsTableRow';\n\n\nexport function PayloadsTable(props){\n    useEffect( () => {\n        props.subscribeToMoreMessages();\n    }, []);\n    return (\n        <TableContainer component={Paper} className=\"mythicElement\">\n            <Typography variant=\"h3\" align=\"left\" id=\"SettingsTable\" component=\"div\" \n            style={{\"display\": \"inline-block\", \"float\": \"left\", \"marginLeft\": \"10px\"}}>\n              Payloads\n            </Typography>    \n            <Table size=\"small\" style={{\"tableLayout\": \"fixed\", \"maxWidth\": \"100%\", \"overflow\": \"scroll\"}}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell style={{width: \"2rem\"}}> Delete</TableCell>\n                        <TableCell style={{width: \"12rem\"}}>Timestamp</TableCell>\n                        <TableCell style={{width: \"4rem\"}}>Modify</TableCell>\n                        <TableCell style={{width: \"6rem\"}}>Alert on New</TableCell>\n                        <TableCell style={{width: \"4rem\"}}>Download</TableCell>\n                        <TableCell>File</TableCell>\n                        <TableCell>Description</TableCell>\n                        <TableCell style={{width: \"8rem\"}}>C2 Status</TableCell>\n                        <TableCell style={{width: \"4rem\"}}>More...</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                \n                {props.payload.map( (op) => (\n                    <PayloadsTableRow\n                        onDeletePayload={props.onDeletePayload}\n                        onAlertChanged={props.onUpdateCallbackAlert}\n                        key={\"payload\" + op.id}\n                        {...op}\n                    />\n                ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\n","/mythic/src/components/pages/EventFeed/EventFeedTable.js",["475","476","477","478"],"import React, { useEffect, useRef } from 'react';\nimport { EventFeedTableEvents } from './EventFeedTableEvents';\nimport Typography from '@material-ui/core/Typography';\nimport SendIcon from '@material-ui/icons/Send';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport {TextField} from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport {ThemeContext} from 'styled-components';\nimport { useContext} from 'react';\nimport { EventFeedTableInput } from './EventFeedTableInput';\n\nexport function EventFeedTable(props){\n    const messagesEndRef = useRef(null);\n    const theme = useContext(ThemeContext);\n\n    const onSubmitMessage = (message) => {\n        if(message && message.length > 0){\n            props.onSubmitMessage(\"info\", message);\n        }\n    } \n    const scrollToBottom = () => {\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n      }\n    const subscribeToMoreMessages = () => {\n        props.subscribeToMoreMessages();\n    }\n    useEffect( () => {\n        messagesEndRef.current.scrollIntoView();\n        subscribeToMoreMessages();\n        \n    }, []);\n    useEffect(scrollToBottom, [props.operationeventlog]);\n    return (\n    <React.Fragment>\n        <Typography variant=\"h4\" style={{textAlign: \"left\"}}>\n        Operational Event Messages\n        </Typography>\n        <Paper elevation={5} style={{position: \"relative\", height: \"calc(90vh)\", backgroundColor: theme.body}}>\n             <List style={{height: \"calc(84vh)\", overflow: \"auto\", maxWidth: \"100%\", backgroundColor: theme.eventMessageBackgroundColor}} dense>\n                {props.operationeventlog.map( (op) => (\n                        <EventFeedTableEvents\n                            onDeleteOperator={props.onDeleteOperator}\n                            key={\"event\" + op.id}\n                            onUpdateResolution={props.onUpdateResolution}\n                            onUpdateLevel={props.onUpdateLevel}\n                            onUpdateDeleted={props.onUpdateDeleted}\n                            {...op}\n                        />\n                    ))}\n                    <div ref={messagesEndRef} />\n             </List>\n            <EventFeedTableInput onSubmitMessage={onSubmitMessage} />\n        </Paper>\n    </React.Fragment>\n    )\n}\n\n","/mythic/src/components/pages/CreatePayload/Step5Build.js",["479"],"import React, {useEffect} from 'react';\nimport { gql, useMutation} from '@apollo/client';\nimport { useSnackbar } from 'notistack';\nimport { CreatePayloadNavigationButtons} from './CreatePayloadNavigationButtons';\nimport Typography from '@material-ui/core/Typography';\nimport {PayloadSubscriptionNotification} from './PayloadSubscriptionNotification';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\n\n const create_payload = gql`\n mutation createPayloadMutation($payload: String!) {\n  createPayload(payloadDefinition: $payload) {\n    error\n    status\n    uuid\n  }\n}\n `;\n\n\nexport function Step5Build(props){\n    const { enqueueSnackbar } = useSnackbar();\n    const [filename, setFilename] = React.useState(\"\");\n    const [description, setDescription] = React.useState();\n    const [createPayloadMutation] = useMutation(create_payload, {\n        update: (cache, {data}) => {\n            if(data.createPayload.status === \"success\"){\n                enqueueSnackbar(\"Submitted payload to build pipeline\", {variant: \"info\"});\n            }else{\n                enqueueSnackbar(data.createPayload.error, {variant: \"error\"});\n            }\n        }\n    });\n    useEffect( () => {\n        if(props.buildOptions[1][\"file_extension\"] !== \"\"){\n            setFilename(props.buildOptions[1][\"payload_type\"] + \".\" + props.buildOptions[1][\"file_extension\"]);\n        }else{\n            setFilename(props.buildOptions[1][\"payload_type\"] );\n        }\n        \n    }, []);\n    const onChangeFilename = (name, value, error) => {\n        setFilename(value);\n    }\n    const onChangeDescription = (name, value, error) => {\n        setDescription(value);\n    }\n    const finished = () => {\n        const buildParameters = props.buildOptions[1][\"parameters\"].map( (param) => {\n            return param;\n        });\n        const c2Profiles = props.buildOptions[3].reduce( (prev, c2) => {\n            if(c2.selected){\n                const parameters = c2.c2profileparameters.reduce( (prev, param) => {\n                    return {...prev, [param.name]: param.value}\n                }, {});\n                return [...prev, {\"c2_profile\": c2.name, \"c2_profile_parameters\": parameters}];\n            }\n            return prev;\n        }, []);\n        const finishedPayload = {\n            \"selected_os\": props.buildOptions[0],\n            \"payload_type\": props.buildOptions[1][\"payload_type\"],\n            \"filename\": filename,\n            \"tag\": description,\n            \"commands\": props.buildOptions[2],\n            \"build_parameters\": buildParameters,\n            \"c2_profiles\": c2Profiles\n            };\n        createPayloadMutation({variables: {payload: JSON.stringify(finishedPayload)}}).catch( (e) => {console.log(e)} );\n    }\n    const canceled = () => {\n        props.canceled();\n    }\n\n    return (\n        <div >\n            <Typography variant=\"h3\" align=\"left\" id=\"selectc2profiles\" component=\"div\" \n                style={{\"marginLeft\": \"10px\"}}>\n                  Payload Review\n            </Typography>\n            <br/>\n            <MythicTextField required={false} placeholder={\"Filename\"} value={filename} multiline={false} onChange={onChangeFilename} display=\"inline-block\"/>\n            <MythicTextField required={false} placeholder={\"description\"} value={description} multiline={false} onChange={onChangeDescription} display=\"inline-block\"/>\n            <CreatePayloadNavigationButtons first={props.first} last={props.last} canceled={canceled} finished={finished} />\n            <br/><br/>\n            <PayloadSubscriptionNotification fromNow/>\n        </div>\n    );\n} \n","/mythic/src/components/pages/CreatePayload/Step3SelectCommands.js",[],"/mythic/src/components/pages/CreatePayload/Step4C2Profiles.js",[],"/mythic/src/components/pages/CreatePayload/Step2SelectPayloadType.js",[],"/mythic/src/components/pages/BrowserScripts/BrowserScriptsTable.js",["480"],"import React, {useEffect} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { BrowserScriptsTableRow } from './BrowserScriptsTableRow';\n\n\nexport function BrowserScriptsTable(props){\n    useEffect( () => {\n        props.subscribeToMoreMessages();\n    }, []);\n    return (\n        <TableContainer component={Paper} className=\"mythicElement\" style={{maxHeight: \"calc(50vh)\"}}>\n            <Typography variant=\"h4\" align=\"left\" id=\"browserscriptstable\" component=\"div\" \n            style={{\"display\": \"inline-block\", \"float\": \"left\", \"marginLeft\": \"10px\"}}>\n              Browser Scripts\n            </Typography>    \n            <Table size=\"small\" style={{\"tableLayout\": \"fixed\", \"maxWidth\": \"100%\", \"overflow\": \"scroll\"}}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell style={{width: \"2rem\"}}>Active</TableCell>\n                        <TableCell style={{width: \"10em\"}}>Payload</TableCell>\n                        <TableCell style={{}}>Command</TableCell>\n                        <TableCell style={{width: \"5em\"}}>User Modified?</TableCell>\n                        <TableCell style={{width: \"3em\"}}> Edit</TableCell>\n                        <TableCell style={{width: \"6em\"}}>Apply to Operation</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                {props.browserscript.map( (op) => (\n                    <BrowserScriptsTableRow onToggleActive={props.onToggleActive} onSubmitEdit={props.onSubmitEdit} onRevert={props.onRevert} onToggleOperation={props.onToggleOperation}\n                        key={\"script\" + op.id}\n                        {...op}\n                    />\n                ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\n","/mythic/src/components/pages/BrowserScripts/BrowserScriptsOperationsTable.js",["481"],"import React, {useEffect} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { BrowserScriptsOperationsTableRow } from './BrowserScriptsOperationsTableRow';\n\n\nexport function BrowserScriptsOperationsTable(props){\n    useEffect( () => {\n        props.subscribeToMoreMessages();\n    }, []);\n    return (\n        <TableContainer component={Paper} className=\"mythicElement\" style={{maxHeight: \"calc(30vh)\"}}>\n            <Typography variant=\"h4\" align=\"left\" id=\"browserscriptstable\" component=\"div\" \n            style={{\"display\": \"inline-block\", \"float\": \"left\", \"marginLeft\": \"10px\"}}>\n              Operation Browser Scripts\n            </Typography>    \n            <Table size=\"small\" style={{\"tableLayout\": \"fixed\", \"maxWidth\": \"100%\", \"overflow\": \"scroll\"}}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell style={{width: \"10em\"}}>Payload</TableCell>\n                        <TableCell style={{}}>Command</TableCell>\n                        <TableCell style={{width: \"5em\"}}>User Modified?</TableCell>\n                        <TableCell style={{}}>Operator</TableCell>\n                        <TableCell style={{width: \"5em\"}}>View Script</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                {props.browserscriptoperation.map( (op) => (\n                    <BrowserScriptsOperationsTableRow\n                        key={\"opscriptrow\" + op.browserscript.id}\n                        {...op}\n                    />\n                ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\n","/mythic/src/components/pages/CreatePayload/Step1SelectOS.js",[],"/mythic/src/components/pages/C2Profiles/C2ProfileStartStopOutputDialog.js",[],"/mythic/src/components/pages/C2Profiles/C2ProfileConfigDialog.js",[],"/mythic/src/components/pages/Payloads/PayloadsTableRow.js",["482","483","484","485","486","487"],"import React, {useRef} from 'react';\nimport {Button} from '@material-ui/core';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Switch from '@material-ui/core/Switch';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport { toLocalTime } from '../../utilities/Time';\nimport { meState } from '../../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport {DetailedPayloadTable} from './DetailedPayloadTable';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport Grow from '@material-ui/core/Grow';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Paper from '@material-ui/core/Paper';\nimport {MythicConfirmDialog} from '../../MythicComponents/MythicConfirmDialog';\nimport {PayloadDescriptionDialog} from './PayloadDescriptionDialog';\nimport {PayloadFilenameDialog} from './PayloadFilenameDialog';\nimport {PayloadBuildMessageDialog} from './PayloadBuildMessageDialog';\nimport Typography from '@material-ui/core/Typography';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport {muiTheme} from '../../../themes/Themes';\nimport {PayloadsTableRowC2Status} from './PayloadsTableRowC2Status';\n\nexport function PayloadsTableRow(props){\n    const [open, setOpen] = React.useState(false);\n    const [openUpdate, setOpenUpdateDialog] = React.useState(false);\n    const [openDelete, setOpenDeleteDialog] = React.useState(false);\n    const [openDescription, setOpenDescriptionDialog] = React.useState(false);\n    const [openFilename, setOpenFilenameDialog] = React.useState(false);\n    const [openBuildMessage, setOpenBuildMessageDialog] = React.useState(false);\n    const [dropdownOpen, setDropdownOpen] = React.useState(false);\n    const dropdownAnchorRef = useRef(null);\n    const me = useReactiveVar(meState);\n    \n    const onAlertChanged = (evt) => {\n        const {id} = props;\n        props.onAlertChanged(id, !props[evt.target.name]);\n    }\n    const onAcceptDelete = () => {\n        props.onDeletePayload(props.id);\n        setOpenDeleteDialog(false);\n    }\n    const handleMenuItemClick = (event, index) => {\n        options[index].click();\n        setOpenUpdateDialog(false);\n    };\n    const options = [{name: 'Rename File', click: () => {\n                        setOpenFilenameDialog(true);\n                     }},\n                     {name: 'Edit Description', click: () => {\n                        setOpenDescriptionDialog(true);\n                     }},\n                     {name: 'View Build Message', click: () => {\n                        setOpenBuildMessageDialog(true);\n                     }}\n                     ];\n    const handleClose = (event) => {\n        if (dropdownAnchorRef.current && dropdownAnchorRef.current.contains(event.target)) {\n          return;\n        }\n        setOpenUpdateDialog(false);\n      };\n    return (\n        <React.Fragment>\n            <TableRow key={\"payload\" + props.uuid}>\n                <TableCell>\n                <IconButton size=\"small\" onClick={()=>{setOpenDeleteDialog(true);}} color=\"secondary\" variant=\"contained\"><DeleteIcon/></IconButton>\n                <MythicConfirmDialog onClose={() => {setOpenDeleteDialog(false);}} onSubmit={onAcceptDelete} open={openDelete}/>\n                </TableCell>\n                <TableCell>{toLocalTime(props.creation_time, me.user.view_utc_time)}</TableCell>\n                <TableCell><Button ref={dropdownAnchorRef} size=\"small\" onClick={()=>{setOpenUpdateDialog(true);}} color=\"primary\" variant=\"contained\">Actions</Button>\n                <Popper open={openUpdate} anchorEl={dropdownAnchorRef.current} role={undefined} transition disablePortal style={{zIndex: 4}}>\n                  {({ TransitionProps, placement }) => (\n                    <Grow\n                      {...TransitionProps}\n                      style={{\n                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                      }}\n                    >\n                      <Paper>\n                        <ClickAwayListener onClickAway={handleClose}>\n                          <MenuList id=\"split-button-menu\" anchorEl={dropdownAnchorRef} >\n                            {options.map((option, index) => (\n                              <MenuItem\n                                key={option.name + props.uuid}\n                                onClick={(event) => handleMenuItemClick(event, index)}\n                              >\n                                {option.name}\n                              </MenuItem>\n                            ))}\n                          </MenuList>\n                        </ClickAwayListener>\n                      </Paper>\n                    </Grow>\n                  )}\n                </Popper>\n                <MythicDialog fullWidth={true} maxWidth=\"md\" open={openDescription} \n                    onClose={()=>{setOpenDescriptionDialog(false);}} \n                    innerDialog={<PayloadDescriptionDialog payload_id={props.id} onClose={()=>{setOpenDescriptionDialog(false);}} />}\n                />\n                <MythicDialog fullWidth={true} maxWidth=\"md\" open={openFilename} \n                    onClose={()=>{setOpenFilenameDialog(false);}} \n                    innerDialog={<PayloadFilenameDialog payload_id={props.id} onClose={()=>{setOpenFilenameDialog(false);}} />}\n                />\n                <MythicDialog fullWidth={true} maxWidth=\"md\" open={openBuildMessage} \n                    onClose={()=>{setOpenBuildMessageDialog(false);}} \n                    innerDialog={<PayloadBuildMessageDialog payload_id={props.id} onClose={()=>{setOpenBuildMessageDialog(false);}} />}\n                />\n                </TableCell>\n                <TableCell>\n                    <Switch\n                        checked={props.callback_alert}\n                        onChange={onAlertChanged}\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\n                        name=\"callback_alert\"\n                      />\n                </TableCell>\n                <TableCell>\n                    {props.build_phase === \"success\" ?\n                        ( <IconButton variant=\"contained\" target=\"_blank\" color=\"primary\" href={window.location.origin + \"/direct/download/\" + props.filemetum.agent_file_id} download><GetAppIcon /></IconButton>\n                        )\n                        : \n                        (props.build_phase === \"building\" ? \n                        (<CircularProgress size={20} thickness={4} />) : \n                        (<ErrorIcon />) \n                        )\n                    }\n                </TableCell>\n                <TableCell>{props.filemetum.filename_text}</TableCell>\n                <TableCell>{props.tag}</TableCell>\n                <TableCell>\n                    <PayloadsTableRowC2Status payloadc2profiles={props.payloadc2profiles} uuid={props.uuid} />\n                </TableCell>\n                <TableCell>\n                    <IconButton size=\"small\" aria-label=\"expand row\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon className=\"mythicElement\"/> : <KeyboardArrowDownIcon className=\"mythicElement\"/>}\n                      </IconButton>\n                </TableCell>\n            </TableRow>\n            <TableRow>\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={9}>\n              <Collapse in={open}>\n                <Box margin={1}>\n                  <DetailedPayloadTable {...props} payload_id={props.id} />\n                </Box>\n              </Collapse>\n            </TableCell>\n          </TableRow>\n        </React.Fragment>\n        )\n}\n\n","/mythic/src/components/pages/EventFeed/EventFeedTableInput.js",[],"/mythic/src/components/pages/CreatePayload/PayloadSubscriptionNotification.js",["488"],"import React, {useEffect, useState, useContext} from 'react';\nimport {gql, useSubscription} from '@apollo/client';\nimport { useSnackbar, SnackbarContent } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Collapse from '@material-ui/core/Collapse';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport {ThemeContext} from 'styled-components';\nimport {muiTheme} from '../../../themes/Themes';\n\n//fromNow must be in ISO format for hasura/postgres stuff\n//new Date().toISOString() will do it\nconst subscribe_payloads = gql`\nsubscription NewPayloadsSubscription($fromNow: timestamp!) {\n  payload(limit: 1, where: {deleted: {_eq: false}, creation_time: {_gte: $fromNow}}, order_by: {creation_time: desc}) {\n    build_message\n    build_phase\n    uuid\n    tag\n    id\n    filemetum{\n        agent_file_id\n    }\n  }\n}\n `;\nconst useStyles =  makeStyles(theme => ({\n    root: {\n        [theme.breakpoints.up('sm')]: {\n            minWidth: '344px !important',\n        },\n    },\n    typography: {\n        fontWeight: 'bold',\n    },\n    actionRoot: {\n        padding: '8px 8px 8px 16px',\n    },\n    icons: {\n        marginLeft: 'auto',\n    },\n    expand: {\n        padding: '8px 8px',\n        transform: 'rotate(0deg)',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    collapse: {\n        padding: 16,\n    },\n    checkIcon: {\n        fontSize: 20,\n        color: '#b3b3b3',\n        paddingRight: 4,\n    },\n    button: {\n        padding: 0,\n        textTransform: 'none',\n    },\n}));\n\nconst SnackMessage = React.forwardRef((props, ref) => {\n    \n    const theme = useContext(ThemeContext);\n    const classes = useStyles(theme);\n    const { closeSnackbar } = useSnackbar();\n    const [expanded, setExpanded] = useState(false);\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const handleDismiss = () => {\n        closeSnackbar(props.id);\n    };\n\n    return (\n        <SnackbarContent ref={ref} className={classes.root}>\n            <Card style={{backgroundColor: muiTheme.palette.success.main}} >\n                <CardActions classes={{ root: classes.actionRoot }}>\n                    <Typography variant=\"subtitle2\" className={classes.typography}>Payload successfuly built!</Typography>\n                    <div className={classes.icons}>\n                        <IconButton\n                            aria-label=\"Show more\"\n                            className={clsx(classes.expand, { [classes.expandOpen]: expanded })}\n                            onClick={handleExpandClick}\n                        >\n                            <ExpandMoreIcon />\n                        </IconButton>\n                        <IconButton className={classes.expand} onClick={handleDismiss}>\n                            <CloseIcon />\n                        </IconButton>\n                    </div>\n                </CardActions>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <Paper className={classes.collapse}>\n                        <Typography gutterBottom>Agent ready for download</Typography>\n                        <Button size=\"small\" className={classes.button} download href={window.location.origin + \"/direct/download/\" + props.file_id}>\n                            <CheckCircleIcon className={classes.checkIcon} />\n                            Download now\n                        </Button>\n                    </Paper>\n                </Collapse>\n            </Card>\n        </SnackbarContent>\n    );\n});\nexport function PayloadSubscriptionNotification(props) {\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const [fromNow, setFromNow] = React.useState(null);\n    const { loading, error, data } = useSubscription(subscribe_payloads, {variables: {fromNow}});\n    \n    \n    useEffect( () => {\n        setFromNow(new Date().toISOString());\n    }, []);\n    useEffect( () => {\n        const badActions = key => (\n            <React.Fragment>\n                <Button onClick={() => { closeSnackbar(key) }} variant=\"outlined\">\n                    'Dismiss'\n                </Button>\n            </React.Fragment>\n        )\n        //console.log(data, loading, error);\n        if(!loading && !error && data && data.payload.length > 0){\n            if(data.payload[0].build_phase === \"success\"){\n                enqueueSnackbar(data.payload[0].build_message, {persist: true, content: key => <SnackMessage id={key} file_id={data.payload[0].filemetum.agent_file_id} />});\n            }else if(data.payload[0].build_phase === \"building\"){\n                enqueueSnackbar(`Building payload ${data.payload[0].uuid}...`, {variant: \"info\", autoHideDuration: 5000});\n            }else{\n                enqueueSnackbar(data.payload[0].build_message, {variant: \"error\", persist: true, action: badActions});\n            } \n        }else if(error){\n            console.log(error);\n            enqueueSnackbar(\"Mythic encountered an error\", {variant: \"error\"});\n        }\n    }, [loading, data, enqueueSnackbar, error]);\n    return (    \n       null\n    );\n}\n\n","/mythic/src/components/pages/CreatePayload/CreatePayloadNavigationButtons.js",[],"/mythic/src/components/pages/EventFeed/EventFeedTableEvents.js",[],"/mythic/src/components/pages/CreatePayload/CreatePayloadBuildParametersTable.js",[],"/mythic/src/components/pages/CreatePayload/CreatePayloadC2ProfileParametersTable.js",[],"/mythic/src/components/pages/BrowserScripts/BrowserScriptsTableRow.js",["489","490","491","492","493","494","495","496"],"import React, {useRef} from 'react';\nimport {Button, Switch} from '@material-ui/core';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport { toLocalTime } from '../../utilities/Time';\nimport { meState } from '../../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport {MythicConfirmDialog} from '../../MythicComponents/MythicConfirmDialog';\nimport {muiTheme} from '../../../themes/Themes';\nimport {EditScriptDialog} from './EditScriptDialog';\n\nexport function BrowserScriptsTableRow(props){\n    const [openEdit, setOpenEdit] = React.useState(false);\n    const onSubmitEdit = (script) => {\n        props.onSubmitEdit({browserscript_id: props.id, script: script});\n    }\n    const onRevert = () => {\n        props.onRevert({browserscript_id: props.id, script: props.container_version});\n    }\n    const onSubmitApplyToOperation = () => {\n    \n    }\n    const onToggleActive = () => {\n        props.onToggleActive({browserscript_id: props.id, active: !props.active});\n    }\n    return (\n        <React.Fragment>\n            <TableRow key={\"payload\" + props.id}>\n                <TableCell>\n                    <Switch\n                        checked={props.active}\n                        onChange={onToggleActive}\n                        color=\"primary\"\n                        inputProps={{ 'aria-label': 'checkbox', \"track\": \"white\" }}\n                        name=\"Active\"\n                      />\n                </TableCell>\n                <TableCell>{props.payloadtype.ptype}</TableCell>\n                <TableCell>{props.command === null ? \"Support Script: \" + props.name : props.command.cmd}</TableCell>\n                <TableCell>{props.user_modified ? \"User Modified\" : \"\" } </TableCell>\n                <TableCell><Button size=\"small\" variant=\"contained\" onClick={ () => {setOpenEdit(true);} } style={{color: muiTheme.palette.info.main}}> Edit </Button></TableCell>\n                <TableCell><Button size=\"small\" variant=\"contained\" style={{color: muiTheme.palette.info.main}}>Apply</Button></TableCell>   \n                <MythicDialog fullWidth={true} maxWidth=\"md\" open={openEdit} \n                    onClose={()=>{setOpenEdit(false);}} \n                    innerDialog={\n                        <EditScriptDialog onClose={()=>{setOpenEdit(false);}} script={props.script} onSubmitEdit={onSubmitEdit} onRevert={onRevert}/>\n                    } />    \n            </TableRow>\n        </React.Fragment>\n        )\n}\n\n","/mythic/src/components/pages/BrowserScripts/BrowserScriptsOperationsTableRow.js",["497","498","499","500","501","502","503","504","505"],"import React, {useRef, useEffect} from 'react';\nimport {Button, Switch} from '@material-ui/core';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { MythicDialog } from '../../MythicComponents/MythicDialog';\nimport { toLocalTime } from '../../utilities/Time';\nimport { meState } from '../../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport AceEditor from 'react-ace';\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport {muiTheme} from '../../../themes/Themes';\n\nexport function BrowserScriptsOperationsTableRow(props){\n    const [openDelete, setOpenDeleteDialog] = React.useState(false);\n    const [openViewScript, setOpenViewScript] = React.useState(false);\n    const [displayName, setDisplayName] = React.useState(\"\");\n\n    const onAcceptDelete = () => {\n        props.onDeletePayload(props.id);\n        setOpenDeleteDialog(false);\n    }\n    useEffect( () => {\n        setDisplayName(props.browserscript.command === null ? \"Support Script: \" + props.browserscript.name : props.browserscript.command.cmd);\n    }, [props.browserscript]);\n    return (\n        <React.Fragment>\n            <TableRow key={\"opscript\" + props.browserscript.id}>\n                <TableCell>{props.browserscript.payloadtype.ptype}</TableCell>\n                <TableCell>{displayName}</TableCell>\n                <TableCell>{props.browserscript.user_modified ? \"User Modified\" : \"\" } </TableCell>\n                <TableCell>{props.operation.admin.username}</TableCell>\n                <TableCell><Button size=\"small\" variant=\"contained\" style={{color: muiTheme.palette.info.main}} onClick={() => {setOpenViewScript(true);}}> View </Button></TableCell>    \n                <MythicDialog fullWidth={true} maxWidth=\"md\" open={openViewScript} \n                    onClose={()=>{setOpenViewScript(false);}} \n                    innerDialog={\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"github\"\n                            width=\"100%\"\n                            value={atob(props.browserscript.script)} \n                            focus={true}\n                            readOnly={true}\n                            onChange={() => {}}\n                            setOptions={{\n                            \n                            }}\n                        />\n                    } />\n            </TableRow>\n        </React.Fragment>\n        )\n}\n\n","/mythic/src/components/pages/Payloads/PayloadsTableRowC2Status.js",[],"/mythic/src/components/pages/Payloads/PayloadBuildMessageDialog.js",[],"/mythic/src/components/pages/Payloads/PayloadDescriptionDialog.js",["506"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\nimport {useQuery, gql, useReactiveVar, useMutation} from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { meState } from '../../../cache';\n\nconst updateDescriptionMutation = gql`\nmutation updateDescription ($payload_id: Int!, $description: String) {\n  update_payload_by_pk(pk_columns: {id: $payload_id}, _set: {tag: $description}) {\n    tag\n    id\n  }\n}\n`;\nconst getDescriptionQuery = gql`\nquery getDescriptionQuery ($payload_id: Int!) {\n  payload_by_pk(id: $payload_id) {\n    tag\n    id\n  }\n}\n`;\n\nexport function PayloadDescriptionDialog(props) {\n    const [description, setDescription] = useState(\"\");\n    const me = useReactiveVar(meState);\n    const { loading, error } = useQuery(getDescriptionQuery, {\n        variables: {payload_id: props.payload_id},\n        onCompleted: data => {\n            setDescription(data.payload_by_pk.tag)\n        },\n        fetchPolicy: \"network-only\"\n    });\n    const [updateDescription] = useMutation(updateDescriptionMutation, {\n        update: (cache, {data}) => {\n            //console.log(data);\n        }\n    });\n    if (loading) {\n     return <LinearProgress style={{marginTop: \"10px\"}} />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    const onCommitSubmit = () => {\n        updateDescription({variables: {payload_id: props.payload_id, description: description}});\n        props.onClose();\n    }\n    const onChange = (name, value, error) => {\n        setDescription(value);\n    }\n  \n  return (\n    <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">Edit Payload Description</DialogTitle>\n        <DialogContent dividers={true}>\n            <MythicTextField multiline={true} onChange={onChange} value={description} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={onCommitSubmit} color=\"secondary\">\n            Submit\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/MythicComponents/MythicConfirmDialog.js",["507"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {muiTheme} from '../../themes/Themes.js';\nimport {MythicDialog} from './MythicDialog';\n\nexport function MythicConfirmDialog(props) {\n    const handleSubmit = () => {\n        props.onSubmit();\n        props.onClose();\n    }\n  return (\n    <MythicDialog fullWidth={false} maxWidth=\"sm\" open={props.open} onClose={()=>{props.onClose()}} innerDialog={\n        <React.Fragment>\n            <DialogTitle >Are you sure?</DialogTitle>\n            <DialogActions>\n              <Button onClick={props.onClose} color=\"primary\">\n                Close\n              </Button>\n              <Button onClick={handleSubmit} style={{color: muiTheme.palette.warning.main}}>\n                Remove\n              </Button>\n            </DialogActions>\n        </React.Fragment>\n  } />\n  );\n}\n","/mythic/src/components/pages/Payloads/PayloadFilenameDialog.js",["508"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\nimport {useQuery, gql, useReactiveVar, useMutation} from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { meState } from '../../../cache';\n\nconst updateDescriptionMutation = gql`\nmutation updateDescription ($file_id: Int!, $filename: bytea!) {\n  update_filemeta_by_pk(pk_columns: {id: $file_id}, _set: {filename: $filename}) {\n    filename_text\n    id\n  }\n}\n`;\nconst getFilenameQuery = gql`\nquery getFilenameQuery ($payload_id: Int!) {\n  payload_by_pk(id: $payload_id) {\n    filemetum {\n      filename_text\n      id\n    }\n    id\n  }\n}\n`;\n\nexport function PayloadFilenameDialog(props) {\n    const [description, setDescription] = useState(\"\");\n    const [fileId, setFileId] = useState()\n    const me = useReactiveVar(meState);\n    const { loading, error } = useQuery(getFilenameQuery, {\n        variables: {payload_id: props.payload_id},\n        onCompleted: data => {\n            setDescription(data.payload_by_pk.filemetum.filename_text);\n            setFileId(data.payload_by_pk.filemetum.id);\n        },\n        fetchPolicy: \"network-only\"\n    });\n    const [updateDescription] = useMutation(updateDescriptionMutation, {\n        update: (cache, {data}) => {\n            //console.log(data);\n        }\n    });\n    if (loading) {\n     return <LinearProgress style={{marginTop: \"10px\"}} />;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    const onCommitSubmit = () => {\n        updateDescription({variables: {file_id: fileId, filename: description}});\n        props.onClose();\n    }\n    const onChange = (name, value, error) => {\n        setDescription(value);\n    }\n  \n  return (\n    <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">Edit Payload Filename</DialogTitle>\n        <DialogContent dividers={true}>\n            <MythicTextField multiline={true} onChange={onChange} value={description} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={onCommitSubmit} color=\"secondary\">\n            Submit\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/pages/CreatePayload/CreatePayloadParameter.js",["509"],"import React, {useEffect} from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MythicTextField from '../../MythicComponents/MythicTextField';\n\nexport function CreatePayloadParameter(props){\n    const [value, setValue] = React.useState(\"\");\n    const [chooseOptions, setChooseOptions] = React.useState([]);\n    useEffect( () => {\n        if(props.parameter_type === \"ChooseOne\"){\n            if(props.default_value){\n                const options = props.default_value.split(\"\\n\");\n                if( value === null){\n                    setValue(options[0]);\n                }\n                setChooseOptions(options);\n            }else{\n                const options = props.parameter.split(\"\\n\");\n                if( value === null){\n                    setValue(options[0]);\n                }\n                setChooseOptions(options)\n            }\n        }else{\n            setValue(props.default_value);\n        }\n    }, []);\n    const onChangeValue = (evt) => {\n        setValue(evt.target.value);\n        props.onChange(props.name, evt.target.value, false);\n    }\n    const onChangeText = (name, value, error) => {\n        setValue(value);\n        props.onChange(props.name, value, error);\n    }\n    const testParameterValues = (curVal) => {\n        if( props.required && props.verifier_regex !== \"\"){\n            return !RegExp(props.verifier_regex).test(curVal);\n        }else if(props.verifier_regex !== \"\" && curVal !== \"\"){\n            return !RegExp(props.verifier_regex).test(curVal);\n        }else{\n            return false;\n        }\n    }\n    const getParameterObject = () => {\n        switch(props.parameter_type){\n            case \"ChooseOne\":\n                return (\n                    <FormControl>\n                        <Select\n                          native\n                          value={value}\n                          onChange={onChangeValue}\n                        >\n                        {\n                            chooseOptions.map((opt, i) => (\n                                <option key={\"buildparamopt\" + i} value={opt}>{opt}</option>\n                            ))\n                        }\n                        </Select>\n                    </FormControl>\n                )\n            case \"String\":\n                return (\n                    <MythicTextField required={props.required} placeholder={props.default_value} value={value} multiline={true}\n                        onChange={onChangeText} display=\"inline-block\"\n                        validate={testParameterValues} errorText={\"Must match: \" + props.verifier_regex}\n                    />\n                )\n           default:\n            return null\n        }\n    }\n    \n    return (\n            <TableRow key={\"buildparam\" + props.id}>\n                <TableCell>{props.description}\n                 </TableCell>\n                <TableCell>\n                    {getParameterObject()}\n                </TableCell>\n            </TableRow>\n        )\n}\n\n","/mythic/src/components/pages/Payloads/DetailedPayloadTable.js",["510"],"import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport Typography from '@material-ui/core/Typography';\nimport { toLocalTime } from '../../utilities/Time';\nimport {useQuery, gql} from '@apollo/client';\nimport { meState } from '../../../cache';\nimport {useReactiveVar} from '@apollo/client';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst GET_Payload_Details = gql`\nquery GetPayloadDetails($payload_id: Int!, $operation_id: Int!) {\n  payload(where: {id: {_eq: $payload_id}, operation_id: {_eq: $operation_id}}) {\n    uuid\n    payloadtype{\n        ptype\n    }\n    payloadcommands {\n      id\n      version\n      command {\n        cmd\n        id\n        version\n      }\n    }\n    filemetum {\n      filename\n      agent_file_id\n      id\n      md5\n      sha1\n    }\n    buildparameterinstances {\n      parameter\n      id\n      buildparameter {\n        description\n      }\n    }\n    c2profileparametersinstances(order_by: {c2profile: {name: asc}}) {\n      value\n      c2profileparameter {\n        description\n      }\n      c2profile {\n        name\n      }\n      enc_key\n      dec_key\n    }\n  }\n}\n`;\nexport function DetailedPayloadTable(props){\n    const me = useReactiveVar(meState);\n    const [commands, setCommands] = React.useState([]);\n    const [buildParameters, setBuildParameters] = React.useState([]);\n    const [c2Profiles, setC2Profiles] = React.useState([]);\n    const { loading, error, data } = useQuery(GET_Payload_Details, {\n        variables: {payload_id: props.payload_id, operation_id: me.user.current_operation_id},\n        onCompleted: data => {\n            const commandState = data.payload[0].payloadcommands.map( (c) => \n            { \n                return {cmd: c.command.cmd, mythic: c.command.version, payload: c.version} \n            }).sort((a,b) => (a.cmd > b.cmd) ? 1: ((b.cmd > a.cmd) ? -1 : 0));\n            setCommands(commandState);\n            const buildParametersState = data.payload[0].buildparameterinstances.map( (b) =>\n            {\n                return {description: b.buildparameter.description, value: b.parameter}\n            }).sort((a,b) => (a.description > b.description) ? 1: ((b.description > a.description) ? -1 : 0));\n            setBuildParameters(buildParametersState);\n            const c2Profiles = data.payload[0].c2profileparametersinstances.reduce( (prev, cur) => {\n                if( !(cur.c2profile.name in prev) ){\n                    return {...prev, [cur.c2profile.name]: [{description: cur.c2profileparameter.description, value: cur.value, enc_key: cur.enc_key, dec_key: cur.dec_key}]}\n                }\n                return {...prev, [cur.c2profile.name]: [...prev[cur.c2profile.name], {description: cur.c2profileparameter.description, value: cur.value, enc_key: cur.enc_key, dec_key: cur.dec_key}]}\n            }, {});\n            const c2ProfilesState = Object.keys(c2Profiles).reduce( (prev, cur) => {\n                return [...prev, {\n                    c2_profile: cur,\n                    parameters: c2Profiles[cur].sort((a,b) => (a.description > b.description) ? 1: ((b.description > a.description) ? -1 : 0))\n                }];\n            }, []);\n            setC2Profiles(c2ProfilesState);\n        }\n        });\n    if (loading) {\n     return <LinearProgress style={{marginTop: \"10px\"}}/>;\n    }\n    if (error) {\n     console.error(error);\n     return <div>Error!</div>;\n    }\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom component=\"div\" style={{display: \"inline-block\"}}>\n                Payload Information\n            </Typography>\n            <Table size=\"small\" aria-label=\"details\" style={{\"tableLayout\": \"fixed\", \"overflowWrap\": \"break-word\"}}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell style={{width: \"30%\"}}>Payload Info</TableCell>\n                    <TableCell>Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>Payload Type</TableCell>\n                        <TableCell>{data.payload[0].payloadtype.ptype}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>UUID</TableCell>\n                        <TableCell>{data.payload[0].uuid}</TableCell>\n                    </TableRow>\n                    { data.payload[0].filemetum ? (\n                        <TableRow key={'filename'}>\n                            <TableCell>Filename</TableCell>\n                            <TableCell>{data.payload[0].filemetum.filename}</TableCell>\n                        </TableRow>\n                        \n                    ) : null }\n\n                    <TableRow>\n                        <TableCell>Download URL</TableCell>\n                        <TableCell>{window.location.origin + \"/direct/download/\" + data.payload[0].filemetum.agent_file_id}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>SHA1</TableCell>\n                        <TableCell>{data.payload[0].filemetum.sha1}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>MD5</TableCell>\n                        <TableCell>{data.payload[0].filemetum.md5}</TableCell>\n                    </TableRow>\n                </TableBody>\n              </Table>\n            <Typography variant=\"h6\" gutterBottom component=\"div\" style={{display: \"inline-block\"}}>\n                Build Parameters\n            </Typography>\n            <Table size=\"small\" aria-label=\"details\" style={{\"tableLayout\": \"fixed\", \"overflowWrap\": \"break-word\"}}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell style={{width: \"30%\"}}>Parameter</TableCell>\n                    <TableCell>Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {\n                    buildParameters.map( (cmd, i) => (\n                        <TableRow key={\"buildprop\" + i + \"for\" + props.payload_id}>\n                            <TableCell>{cmd.description}</TableCell>\n                            <TableCell>{cmd.value}</TableCell>\n                        </TableRow>\n                    ))\n                    \n                  }\n                </TableBody>\n              </Table>\n                { c2Profiles.map( (c2) => (\n                    <React.Fragment key={\"c2frag\" + props.payload_id + c2.c2_profile}>\n                        <Typography variant=\"h6\" gutterBottom component=\"div\" style={{display: \"inline-block\"}}>\n                            {c2.c2_profile}\n                        </Typography>\n                        <Table size=\"small\" aria-label=\"details\" style={{\"tableLayout\": \"fixed\", \"overflowWrap\": \"break-word\"}}>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell style={{width: \"30%\"}}>Parameter</TableCell>\n                                <TableCell>Value</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {\n                                c2.parameters.map( (cmd, j) => (\n                                    <TableRow key={\"c2frag\" + props.payload_id + c2.c2_profile + j}>\n                                        <TableCell>{cmd.description}</TableCell>\n                                        <TableCell>{cmd.value}\n                                        {cmd.enc_key === null ? (null) : (<React.Fragment>\n                                            <br/><b>Encryption Key: </b> {cmd.enc_key}\n                                        </React.Fragment>) }\n                                        {cmd.dec_key === null ? (null) : (<React.Fragment>\n                                            <br/><b>Decryption Key: </b> {cmd.dec_key}\n                                        </React.Fragment>) }\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                                \n                              }\n                            </TableBody>\n                          </Table>\n                      </React.Fragment>\n                ))}\n        <Typography variant=\"h6\" gutterBottom component=\"div\" style={{display: \"inline-block\"}}>\n            Loaded Commands\n        </Typography>\n        <Table size=\"small\" aria-label=\"details\" style={{\"tableLayout\": \"fixed\", \"overflowWrap\": \"break-word\"}}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Command Name</TableCell>\n                <TableCell>Mythic Version</TableCell>\n                <TableCell>Loaded Version</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                commands.map( (cmd) => (\n                    <TableRow key={cmd.cmd + props.payload_id}>\n                        <TableCell>{cmd.cmd}</TableCell>\n                        <TableCell>{cmd.mythic}</TableCell>\n                        <TableCell>{cmd.payload}</TableCell>\n                    </TableRow>\n                ))\n                \n              }\n            </TableBody>\n          </Table>\n          \n                  \n            \n        </React.Fragment>\n        )\n}\n\n","/mythic/src/components/pages/BrowserScripts/EditScriptDialog.js",["511","512"],"import React, {useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {muiTheme} from '../../../themes/Themes';\nimport AceEditor from 'react-ace';\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nexport function EditScriptDialog(props) {\n    const [script, setScript] = React.useState(\"\");\n    const handleSubmit = () => {\n    \n    }\n    useEffect( () => {\n        setScript(atob(props.script));\n    }, []);\n    const onChange = (value) => {\n        setScript(value);\n    }\n    const onSubmit = () => {\n        props.onSubmitEdit(btoa(script));\n        props.onClose();\n    }\n    const onRevert = () => {\n        props.onRevert();\n        props.onClose();\n    }\n  return (\n    <React.Fragment>\n        <DialogTitle >Edit BrowserScript Code</DialogTitle>\n        <DialogContent dividers={true}>\n           <AceEditor\n                mode=\"javascript\"\n                theme=\"github\"\n                width=\"100%\"\n                value={script} \n                focus={true}\n                onChange={onChange}\n                setOptions={{\n                \n                }}\n            />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onRevert} style={{color: muiTheme.palette.success.main}}>\n            Revert\n          </Button>\n          <Button onClick={props.onClose} style={{color: muiTheme.palette.primary.main}}>\n            Close\n          </Button>\n          <Button onClick={onSubmit} style={{color: muiTheme.palette.warning.main}}>\n            Save\n          </Button>\n        </DialogActions>\n  </React.Fragment>\n  );\n}\n\n","/mythic/src/components/pages/C2Profiles/C2ProfileOutputDialog.js",[],"/mythic/src/components/pages/C2Profiles/C2ProfileBuildDialog.js",[],"/mythic/src/components/pages/PayloadTypes/PayloadTypeCard.js",[],"/mythic/src/components/pages/Settings/SettingsOperatorTable.js",[],"/mythic/src/components/pages/PayloadTypes/PayloadTypeBuildDialog.js",[],"/mythic/src/components/pages/Settings/SettingsOperator.js",[],"/mythic/src/components/pages/Settings/SettingsOperatorDialog.js",[],"/mythic/src/components/pages/Settings/SettingsOperatorAPIToken.js",[],"/mythic/src/components/pages/Settings/SettingsOperatorDeleteDialog.js",[],{"ruleId":"513","severity":1,"message":"514","line":92,"column":9,"nodeType":"515","messageId":"516","endLine":92,"endColumn":30},{"ruleId":"513","severity":1,"message":"517","line":140,"column":9,"nodeType":"515","messageId":"518","endLine":141,"endColumn":39},{"ruleId":"519","severity":1,"message":"520","line":148,"column":11,"nodeType":"521","messageId":"522","endLine":148,"endColumn":19},{"ruleId":"519","severity":1,"message":"523","line":2,"column":8,"nodeType":"521","messageId":"522","endLine":2,"endColumn":13},{"ruleId":"519","severity":1,"message":"520","line":26,"column":15,"nodeType":"521","messageId":"522","endLine":26,"endColumn":23},{"ruleId":"519","severity":1,"message":"524","line":9,"column":9,"nodeType":"521","messageId":"522","endLine":9,"endColumn":17},{"ruleId":"525","severity":1,"message":"526","line":162,"column":8,"nodeType":"527","endLine":162,"endColumn":10,"suggestions":"528"},{"ruleId":"519","severity":1,"message":"529","line":39,"column":7,"nodeType":"521","messageId":"522","endLine":39,"endColumn":17},{"ruleId":"519","severity":1,"message":"530","line":40,"column":7,"nodeType":"521","messageId":"522","endLine":40,"endColumn":17},{"ruleId":"519","severity":1,"message":"531","line":47,"column":34,"nodeType":"521","messageId":"522","endLine":47,"endColumn":47},{"ruleId":"532","severity":1,"message":"533","line":54,"column":17,"nodeType":"534","messageId":"535","endLine":54,"endColumn":21},{"ruleId":"532","severity":1,"message":"533","line":55,"column":17,"nodeType":"534","messageId":"535","endLine":55,"endColumn":21},{"ruleId":"525","severity":1,"message":"536","line":74,"column":8,"nodeType":"527","endLine":74,"endColumn":10,"suggestions":"537"},{"ruleId":"519","severity":1,"message":"538","line":133,"column":44,"nodeType":"521","messageId":"522","endLine":133,"endColumn":54},{"ruleId":"525","severity":1,"message":"539","line":38,"column":8,"nodeType":"527","endLine":38,"endColumn":44,"suggestions":"540"},{"ruleId":"519","severity":1,"message":"541","line":2,"column":8,"nodeType":"521","messageId":"522","endLine":2,"endColumn":15},{"ruleId":"519","severity":1,"message":"542","line":53,"column":12,"nodeType":"521","messageId":"522","endLine":53,"endColumn":34},{"ruleId":"519","severity":1,"message":"543","line":53,"column":36,"nodeType":"521","messageId":"522","endLine":53,"endColumn":61},{"ruleId":"519","severity":1,"message":"544","line":56,"column":30,"nodeType":"521","messageId":"522","endLine":56,"endColumn":37},{"ruleId":"519","severity":1,"message":"545","line":56,"column":39,"nodeType":"521","messageId":"522","endLine":56,"endColumn":44},{"ruleId":"525","severity":1,"message":"546","line":244,"column":8,"nodeType":"527","endLine":244,"endColumn":34,"suggestions":"547"},{"ruleId":"519","severity":1,"message":"548","line":2,"column":10,"nodeType":"521","messageId":"522","endLine":2,"endColumn":20},{"ruleId":"519","severity":1,"message":"549","line":3,"column":8,"nodeType":"521","messageId":"522","endLine":3,"endColumn":16},{"ruleId":"519","severity":1,"message":"550","line":5,"column":9,"nodeType":"521","messageId":"522","endLine":5,"endColumn":18},{"ruleId":"519","severity":1,"message":"551","line":6,"column":8,"nodeType":"521","messageId":"522","endLine":6,"endColumn":20},{"ruleId":"519","severity":1,"message":"529","line":112,"column":7,"nodeType":"521","messageId":"522","endLine":112,"endColumn":17},{"ruleId":"519","severity":1,"message":"530","line":113,"column":7,"nodeType":"521","messageId":"522","endLine":113,"endColumn":17},{"ruleId":"519","severity":1,"message":"531","line":124,"column":35,"nodeType":"521","messageId":"522","endLine":124,"endColumn":48},{"ruleId":"532","severity":1,"message":"533","line":131,"column":17,"nodeType":"534","messageId":"535","endLine":131,"endColumn":21},{"ruleId":"532","severity":1,"message":"533","line":132,"column":17,"nodeType":"534","messageId":"535","endLine":132,"endColumn":21},{"ruleId":"525","severity":1,"message":"536","line":204,"column":124,"nodeType":"527","endLine":204,"endColumn":126,"suggestions":"552"},{"ruleId":"519","severity":1,"message":"553","line":16,"column":8,"nodeType":"521","messageId":"522","endLine":16,"endColumn":22},{"ruleId":"519","severity":1,"message":"544","line":229,"column":12,"nodeType":"521","messageId":"522","endLine":229,"endColumn":19},{"ruleId":"519","severity":1,"message":"545","line":229,"column":21,"nodeType":"521","messageId":"522","endLine":229,"endColumn":26},{"ruleId":"519","severity":1,"message":"554","line":229,"column":34,"nodeType":"521","messageId":"522","endLine":229,"endColumn":41},{"ruleId":"555","severity":1,"message":"556","line":483,"column":78,"nodeType":"557","messageId":"558","endLine":487,"endColumn":38},{"ruleId":"525","severity":1,"message":"559","line":526,"column":8,"nodeType":"527","endLine":526,"endColumn":164,"suggestions":"560"},{"ruleId":"519","severity":1,"message":"561","line":1,"column":24,"nodeType":"521","messageId":"522","endLine":1,"endColumn":33},{"ruleId":"519","severity":1,"message":"562","line":1,"column":35,"nodeType":"521","messageId":"522","endLine":1,"endColumn":43},{"ruleId":"519","severity":1,"message":"550","line":15,"column":8,"nodeType":"521","messageId":"522","endLine":15,"endColumn":17},{"ruleId":"519","severity":1,"message":"563","line":49,"column":11,"nodeType":"521","messageId":"522","endLine":49,"endColumn":26},{"ruleId":"519","severity":1,"message":"562","line":1,"column":35,"nodeType":"521","messageId":"522","endLine":1,"endColumn":43},{"ruleId":"525","severity":1,"message":"564","line":33,"column":8,"nodeType":"527","endLine":33,"endColumn":10,"suggestions":"565"},{"ruleId":"519","severity":1,"message":"566","line":44,"column":13,"nodeType":"521","messageId":"522","endLine":44,"endColumn":32},{"ruleId":"525","severity":1,"message":"567","line":118,"column":8,"nodeType":"527","endLine":118,"endColumn":34,"suggestions":"568"},{"ruleId":"569","severity":1,"message":"570","line":122,"column":64,"nodeType":"557","messageId":"571","endLine":122,"endColumn":66},{"ruleId":"519","severity":1,"message":"572","line":5,"column":8,"nodeType":"521","messageId":"522","endLine":5,"endColumn":19},{"ruleId":"519","severity":1,"message":"573","line":16,"column":8,"nodeType":"521","messageId":"522","endLine":16,"endColumn":15},{"ruleId":"519","severity":1,"message":"574","line":28,"column":10,"nodeType":"521","messageId":"522","endLine":28,"endColumn":18},{"ruleId":"519","severity":1,"message":"575","line":101,"column":11,"nodeType":"521","messageId":"522","endLine":101,"endColumn":28},{"ruleId":"519","severity":1,"message":"576","line":104,"column":12,"nodeType":"521","messageId":"522","endLine":104,"endColumn":23},{"ruleId":"519","severity":1,"message":"577","line":104,"column":25,"nodeType":"521","messageId":"522","endLine":104,"endColumn":39},{"ruleId":"525","severity":1,"message":"578","line":163,"column":8,"nodeType":"527","endLine":163,"endColumn":44,"suggestions":"579"},{"ruleId":"580","severity":1,"message":"581","line":213,"column":43,"nodeType":"582","messageId":"535","endLine":213,"endColumn":45},{"ruleId":"525","severity":1,"message":"583","line":62,"column":8,"nodeType":"527","endLine":62,"endColumn":10,"suggestions":"584"},{"ruleId":"519","severity":1,"message":"585","line":7,"column":40,"nodeType":"521","messageId":"522","endLine":7,"endColumn":51},{"ruleId":"519","severity":1,"message":"586","line":24,"column":11,"nodeType":"521","messageId":"522","endLine":24,"endColumn":13},{"ruleId":"519","severity":1,"message":"586","line":45,"column":11,"nodeType":"521","messageId":"522","endLine":45,"endColumn":13},{"ruleId":"519","severity":1,"message":"562","line":1,"column":27,"nodeType":"521","messageId":"522","endLine":1,"endColumn":35},{"ruleId":"519","severity":1,"message":"587","line":3,"column":31,"nodeType":"521","messageId":"522","endLine":3,"endColumn":43},{"ruleId":"519","severity":1,"message":"588","line":4,"column":9,"nodeType":"521","messageId":"522","endLine":4,"endColumn":23},{"ruleId":"519","severity":1,"message":"589","line":5,"column":10,"nodeType":"521","messageId":"522","endLine":5,"endColumn":17},{"ruleId":"519","severity":1,"message":"590","line":4,"column":12,"nodeType":"521","messageId":"522","endLine":4,"endColumn":18},{"ruleId":"519","severity":1,"message":"591","line":4,"column":20,"nodeType":"521","messageId":"522","endLine":4,"endColumn":29},{"ruleId":"519","severity":1,"message":"592","line":5,"column":12,"nodeType":"521","messageId":"522","endLine":5,"endColumn":20},{"ruleId":"519","severity":1,"message":"593","line":5,"column":22,"nodeType":"521","messageId":"522","endLine":5,"endColumn":33},{"ruleId":"519","severity":1,"message":"594","line":7,"column":13,"nodeType":"521","messageId":"522","endLine":7,"endColumn":19},{"ruleId":"525","severity":1,"message":"595","line":9,"column":8,"nodeType":"527","endLine":9,"endColumn":41,"suggestions":"596"},{"ruleId":"519","severity":1,"message":"597","line":14,"column":11,"nodeType":"521","messageId":"522","endLine":14,"endColumn":31},{"ruleId":"519","severity":1,"message":"598","line":15,"column":11,"nodeType":"521","messageId":"522","endLine":15,"endColumn":18},{"ruleId":"519","severity":1,"message":"599","line":16,"column":11,"nodeType":"521","messageId":"522","endLine":16,"endColumn":22},{"ruleId":"525","severity":1,"message":"600","line":33,"column":8,"nodeType":"527","endLine":33,"endColumn":34,"suggestions":"601"},{"ruleId":"602","severity":1,"message":"603","line":119,"column":13,"nodeType":"521","messageId":"604","endLine":119,"endColumn":21},{"ruleId":"525","severity":1,"message":"539","line":16,"column":8,"nodeType":"527","endLine":16,"endColumn":10,"suggestions":"605"},{"ruleId":"519","severity":1,"message":"549","line":4,"column":8,"nodeType":"521","messageId":"522","endLine":4,"endColumn":16},{"ruleId":"519","severity":1,"message":"548","line":5,"column":8,"nodeType":"521","messageId":"522","endLine":5,"endColumn":18},{"ruleId":"519","severity":1,"message":"550","line":7,"column":9,"nodeType":"521","messageId":"522","endLine":7,"endColumn":18},{"ruleId":"525","severity":1,"message":"606","line":32,"column":8,"nodeType":"527","endLine":32,"endColumn":10,"suggestions":"607"},{"ruleId":"525","severity":1,"message":"608","line":40,"column":8,"nodeType":"527","endLine":40,"endColumn":10,"suggestions":"609"},{"ruleId":"525","severity":1,"message":"539","line":16,"column":8,"nodeType":"527","endLine":16,"endColumn":10,"suggestions":"610"},{"ruleId":"525","severity":1,"message":"539","line":16,"column":8,"nodeType":"527","endLine":16,"endColumn":10,"suggestions":"611"},{"ruleId":"519","severity":1,"message":"612","line":30,"column":8,"nodeType":"521","messageId":"522","endLine":30,"endColumn":18},{"ruleId":"519","severity":1,"message":"613","line":31,"column":8,"nodeType":"521","messageId":"522","endLine":31,"endColumn":18},{"ruleId":"519","severity":1,"message":"614","line":32,"column":8,"nodeType":"521","messageId":"522","endLine":32,"endColumn":23},{"ruleId":"519","severity":1,"message":"524","line":33,"column":9,"nodeType":"521","messageId":"522","endLine":33,"endColumn":17},{"ruleId":"519","severity":1,"message":"615","line":43,"column":12,"nodeType":"521","messageId":"522","endLine":43,"endColumn":24},{"ruleId":"519","severity":1,"message":"616","line":43,"column":26,"nodeType":"521","messageId":"522","endLine":43,"endColumn":41},{"ruleId":"525","severity":1,"message":"617","line":150,"column":8,"nodeType":"527","endLine":150,"endColumn":47,"suggestions":"618"},{"ruleId":"519","severity":1,"message":"619","line":1,"column":16,"nodeType":"521","messageId":"522","endLine":1,"endColumn":22},{"ruleId":"519","severity":1,"message":"548","line":5,"column":8,"nodeType":"521","messageId":"522","endLine":5,"endColumn":18},{"ruleId":"519","severity":1,"message":"620","line":6,"column":8,"nodeType":"521","messageId":"522","endLine":6,"endColumn":18},{"ruleId":"519","severity":1,"message":"621","line":8,"column":10,"nodeType":"521","messageId":"522","endLine":8,"endColumn":21},{"ruleId":"519","severity":1,"message":"589","line":9,"column":10,"nodeType":"521","messageId":"522","endLine":9,"endColumn":17},{"ruleId":"519","severity":1,"message":"588","line":10,"column":9,"nodeType":"521","messageId":"522","endLine":10,"endColumn":23},{"ruleId":"519","severity":1,"message":"622","line":11,"column":9,"nodeType":"521","messageId":"522","endLine":11,"endColumn":28},{"ruleId":"519","severity":1,"message":"623","line":23,"column":11,"nodeType":"521","messageId":"522","endLine":23,"endColumn":35},{"ruleId":"519","severity":1,"message":"619","line":1,"column":16,"nodeType":"521","messageId":"522","endLine":1,"endColumn":22},{"ruleId":"519","severity":1,"message":"624","line":2,"column":17,"nodeType":"521","messageId":"522","endLine":2,"endColumn":23},{"ruleId":"519","severity":1,"message":"548","line":5,"column":8,"nodeType":"521","messageId":"522","endLine":5,"endColumn":18},{"ruleId":"519","severity":1,"message":"620","line":6,"column":8,"nodeType":"521","messageId":"522","endLine":6,"endColumn":18},{"ruleId":"519","severity":1,"message":"621","line":8,"column":10,"nodeType":"521","messageId":"522","endLine":8,"endColumn":21},{"ruleId":"519","severity":1,"message":"589","line":9,"column":10,"nodeType":"521","messageId":"522","endLine":9,"endColumn":17},{"ruleId":"519","severity":1,"message":"588","line":10,"column":9,"nodeType":"521","messageId":"522","endLine":10,"endColumn":23},{"ruleId":"519","severity":1,"message":"625","line":17,"column":12,"nodeType":"521","messageId":"522","endLine":17,"endColumn":22},{"ruleId":"519","severity":1,"message":"626","line":21,"column":11,"nodeType":"521","messageId":"522","endLine":21,"endColumn":25},{"ruleId":"519","severity":1,"message":"586","line":30,"column":11,"nodeType":"521","messageId":"522","endLine":30,"endColumn":13},{"ruleId":"519","severity":1,"message":"627","line":4,"column":8,"nodeType":"521","messageId":"522","endLine":4,"endColumn":21},{"ruleId":"519","severity":1,"message":"586","line":34,"column":11,"nodeType":"521","messageId":"522","endLine":34,"endColumn":13},{"ruleId":"525","severity":1,"message":"628","line":29,"column":8,"nodeType":"527","endLine":29,"endColumn":10,"suggestions":"629"},{"ruleId":"519","severity":1,"message":"621","line":8,"column":10,"nodeType":"521","messageId":"522","endLine":8,"endColumn":21},{"ruleId":"519","severity":1,"message":"630","line":13,"column":11,"nodeType":"521","messageId":"522","endLine":13,"endColumn":23},{"ruleId":"525","severity":1,"message":"631","line":18,"column":8,"nodeType":"527","endLine":18,"endColumn":10,"suggestions":"632"},"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.","'muiTheme' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getOperationScripts' and 'me.user.current_operation_id'. Either include them or remove the dependency array.","ArrayExpression",["633"],"'escapeHTML' is assigned a value but never used.","'sort_table' is assigned a value but never used.","'scriptLoading' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","React Hook useEffect has missing dependencies: 'getScripts', 'me.user.current_operation_id', and 'me.user.id'. Either include them or remove the dependency array.",["634"],"'errorEdges' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["635"],"'Tooltip' is defined but never used.","'pickLinkTaskDialogOpen' is assigned a value but never used.","'setPickLinkTaskDialogOpen' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'node_events', 'reZoom', and 'viewConfig'. Either include them or remove the dependency array.",["636"],"'IconButton' is defined but never used.","'SendIcon' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.",["637"],"'LinearProgress' is defined but never used.","'cmdInfo' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'matched'.","ArrowFunctionExpression","unsafeRefs","React Hook useEffect has missing dependencies: 'getLinkInfoFromAgentConnect' and 'getLinkInfoValue'. Either include them or remove the dependency array.",["638"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'inputRefProfile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.options'. Either include it or remove the dependency array.",["639"],"'handleDropdownClose' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEdges'. Either include it or remove the dependency array.",["640"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ButtonGroup' is defined but never used.","'Divider' is defined but never used.","'useTheme' is defined but never used.","'dropdownAnchorRef' is assigned a value but never used.","'displayTime' is assigned a value but never used.","'setDisplayTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lastSeenResponse'. Either include it or remove the dependency array.",["641"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","React Hook useEffect has missing dependencies: 'props.choices', 'props.default_value', 'props.type', and 'props.value'. Either include them or remove the dependency array. If 'setBoolValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["642"],"'useMutation' is defined but never used.","'me' is assigned a value but never used.","'useLazyQuery' is defined but never used.","'useReactiveVar' is defined but never used.","'meState' is defined but never used.","'tables' is assigned a value but never used.","'setTables' is assigned a value but never used.","'collapse' is assigned a value but never used.","'setCollapse' is assigned a value but never used.","'design' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.browserScripts' and 'props.commandID'. Either include them or remove the dependency array.",["643"],"'include_disconnected' is assigned a value but never used.","'rankDir' is assigned a value but never used.","'node_labels' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'node_events', 'reZoom', and 'view_config'. Either include them or remove the dependency array.",["644"],"no-redeclare","'svgGroup' is already defined.","redeclared",["645"],"React Hook useEffect has a missing dependency: 'subscribeToMoreMessages'. Either include it or remove the dependency array.",["646"],"React Hook useEffect has a missing dependency: 'props.buildOptions'. Either include it or remove the dependency array. If 'setFilename' needs the current value of 'props.buildOptions', you can also switch to useReducer instead of useState and read 'props.buildOptions' in the reducer.",["647"],["648"],["649"],"'Typography' is defined but never used.","'CancelIcon' is defined but never used.","'CheckCircleIcon' is defined but never used.","'dropdownOpen' is assigned a value but never used.","'setDropdownOpen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'closeSnackbar'. Either include it or remove the dependency array.",["650"],"'useRef' is defined but never used.","'DeleteIcon' is defined but never used.","'toLocalTime' is defined but never used.","'MythicConfirmDialog' is defined but never used.","'onSubmitApplyToOperation' is assigned a value but never used.","'Switch' is defined but never used.","'openDelete' is assigned a value but never used.","'onAcceptDelete' is assigned a value but never used.","'DialogContent' is defined but never used.","React Hook useEffect has missing dependencies: 'props.default_value', 'props.parameter', 'props.parameter_type', and 'value'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'props.default_value', you can also switch to useReducer instead of useState and read 'props.default_value' in the reducer.",["651"],"'handleSubmit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.script'. Either include it or remove the dependency array. If 'setScript' needs the current value of 'props.script', you can also switch to useReducer instead of useState and read 'props.script' in the reducer.",["652"],{"desc":"653","fix":"654"},{"desc":"655","fix":"656"},{"desc":"657","fix":"658"},{"desc":"659","fix":"660"},{"desc":"655","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"668","fix":"669"},{"desc":"670","fix":"671"},{"desc":"672","fix":"673"},{"desc":"674","fix":"675"},{"desc":"676","fix":"677"},{"desc":"678","fix":"679"},{"desc":"680","fix":"681"},{"desc":"676","fix":"682"},{"desc":"676","fix":"683"},{"desc":"684","fix":"685"},{"desc":"686","fix":"687"},{"desc":"688","fix":"689"},"Update the dependencies array to be: [getOperationScripts, me.user.current_operation_id]",{"range":"690","text":"691"},"Update the dependencies array to be: [getScripts, me.user.current_operation_id, me.user.id]",{"range":"692","text":"693"},"Update the dependencies array to be: [props, props.clickedTabId, props.openTabs]",{"range":"694","text":"695"},"Update the dependencies array to be: [node_events, props.callbackgraphedges, reZoom, viewConfig]",{"range":"696","text":"697"},{"range":"698","text":"693"},"Update the dependencies array to be: [rawParameters, loadedCommandsLoading, allCommandsLoading, loadedAllEdgesLoading, requiredPieces, loadedAllPayloadsLoading, loadedAllPayloadsOnHostsLoading, getLinkInfoFromAgentConnect, getLinkInfoValue]",{"range":"699","text":"700"},"Update the dependencies array to be: [props.options]",{"range":"701","text":"702"},"Update the dependencies array to be: [getEdges, props.callbackgraphedges]",{"range":"703","text":"704"},"Update the dependencies array to be: [props.task.responses, dropdownOpen, lastSeenResponse]",{"range":"705","text":"706"},"Update the dependencies array to be: [props.choices, props.default_value, props.type, props.value]",{"range":"707","text":"708"},"Update the dependencies array to be: [props.task, props.data.response, props.browserScripts, props.commandID]",{"range":"709","text":"710"},"Update the dependencies array to be: [node_events, props.callbackgraphedges, reZoom, view_config]",{"range":"711","text":"712"},"Update the dependencies array to be: [props]",{"range":"713","text":"714"},"Update the dependencies array to be: [subscribeToMoreMessages]",{"range":"715","text":"716"},"Update the dependencies array to be: [props.buildOptions]",{"range":"717","text":"718"},{"range":"719","text":"714"},{"range":"720","text":"714"},"Update the dependencies array to be: [loading, data, enqueueSnackbar, error, closeSnackbar]",{"range":"721","text":"722"},"Update the dependencies array to be: [props.default_value, props.parameter, props.parameter_type, value]",{"range":"723","text":"724"},"Update the dependencies array to be: [props.script]",{"range":"725","text":"726"},[4326,4328],"[getOperationScripts, me.user.current_operation_id]",[2420,2422],"[getScripts, me.user.current_operation_id, me.user.id]",[1179,1215],"[props, props.clickedTabId, props.openTabs]",[11408,11434],"[node_events, props.callbackgraphedges, reZoom, viewConfig]",[6846,6848],[25848,26004],"[rawParameters, loadedCommandsLoading, allCommandsLoading, loadedAllEdgesLoading, requiredPieces, loadedAllPayloadsLoading, loadedAllPayloadsOnHostsLoading, getLinkInfoFromAgentConnect, getLinkInfoValue]",[1305,1307],"[props.options]",[5528,5554],"[getEdges, props.callbackgraphedges]",[6861,6897],"[props.task.responses, dropdownOpen, lastSeenResponse]",[3033,3035],"[props.choices, props.default_value, props.type, props.value]",[337,370],"[props.task, props.data.response, props.browserScripts, props.commandID]",[1216,1242],"[node_events, props.callbackgraphedges, reZoom, view_config]",[624,626],"[props]",[1156,1158],"[subscribeToMoreMessages]",[1473,1475],"[props.buildOptions]",[642,644],[672,674],[5580,5619],"[loading, data, enqueueSnackbar, error, closeSnackbar]",[1105,1107],"[props.default_value, props.parameter, props.parameter_type, value]",[659,661],"[props.script]"]